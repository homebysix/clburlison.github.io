<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Munki on clburlison</title>
    <link>https://clburlison.com/tags/munki/feed/index.xml</link>
    <description>Recent content in Munki on clburlison</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>clburlison@gmail.com (Clayton Burlison)</managingEditor>
    <webMaster>clburlison@gmail.com (Clayton Burlison)</webMaster>
    <copyright>(c) 2014 - 2017 Clayton Burlison</copyright>
    <atom:link href="https://clburlison.com/tags/munki/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Import Logic Pro X Audio Content</title>
      <link>https://clburlison.com/import-logic-pro-x/</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/import-logic-pro-x/</guid>
      <description>&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Updated for Logic 10.2.0 - September 18th, 2015&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This script has been updated to support Logic Pro 10.2.0. This release included many additional audio libraries for the added Alchemy Plugin. The updated script from Hannes will now download audio content to a &amp;ldquo;__Downloaded Items&amp;rdquo; directory and create hard links to Apple&amp;rsquo;s categories.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Today I needed to import 60 packages (37 GB) of audio content for Logic Pro X into my Munki repo. Hannes Juutilainen did most of the hard work with his &lt;a href=&#34;https://github.com/hjuutilainen/adminscripts/blob/master/download-logicprox-content.py&#34; target=&#34;_blank&#34;&gt;download-logicprox-content.py&lt;/a&gt; script which will download all the packages from Apple.&lt;/p&gt;

&lt;p&gt;Then comes the tedious task of importing all 60 packages. I searched GitHub thinking someone else had already done this and found the following &lt;a href=&#34;https://github.com/portalpie/Logic-Pro-X-Additional-Content-Recipes&#34; target=&#34;_blank&#34;&gt;project&lt;/a&gt; by Morgan Daly which uses &lt;a href=&#34;https://github.com/autopkg/autopkg&#34; target=&#34;_blank&#34;&gt;AutoPkg&lt;/a&gt; in order to download and import the packages into Munki &amp;ndash; o_O. This works but is very much overkill as the audio content does not change frequently.&lt;/p&gt;

&lt;p&gt;The previous script by Hannes will download the audio packages into many sub-directories like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;── Apple Loops
│   ├── Chillwave
│   │   └── MAContent10_AppleLoopsChillwave.pkg
│   ├── Deep House
│   │   └── MAContent10_AppleLoopsDeepHouse.pkg
│   ├── Dubstep
│   │   └── MAContent10_AppleLoopsDubstep.pkg
│   ├── Electro House
│   │   └── MAContent10_AppleLoopsElectroHouse.pkg
│   ├── Hip Hop
│   │   └── MAContent10_AppleLoopsHipHop.pkg
│   ├── Modern R&amp;amp;B
│   │   └── MAContent10_AppleLoopsModernRnB.pkg
│   └── Tech House
│       └── MAContent10_AppleLoopsTechHouse.pkg
├── Bass
│   └── MAContent10_InstrumentsBass.pkg
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As such I needed to recursively search for the &lt;code&gt;.pkg&lt;/code&gt; extension and import those files into Munki. The result is the following python script: &lt;a href=&#34;https://github.com/clburlison/scripts/tree/master/clburlison_scripts/LogicProX&#34; target=&#34;_blank&#34;&gt;munkiimport_logic_audio.py&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;notice--danger&#34;&gt;
    &lt;b&gt;10.11 and Logic Audio Content -- November 17th, 2015&lt;/b&gt;
  &lt;p&gt;Dave Weale found a nice little bug with this approach. &lt;br&gt;&lt;br&gt;&lt;u&gt;TL;DR:&lt;/u&gt; 10.11 has SIP enabled and Apple is writing Receipts for the audio content to &lt;code&gt;/System/Library/Receipts&lt;/code&gt;. When munki imports these packages we are using the package receipts to determine if the content has been installed. When removing the package content Munki is unable to remove the recipe as /System is SIP protected.
    &lt;br&gt;&lt;br&gt;
    More info: &lt;a href=&#34;https://groups.google.com/forum/#!topic/munki-discuss/TjeSl39zGVw&#34;&gt;Logic Pro X assets not installing after removal &amp; attempted reinstall&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Setup Munkireport on Ubuntu 14.04 - Part 3</title>
      <link>https://clburlison.com/munkirepo-guide-part-3/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/munkirepo-guide-part-3/</guid>
      <description>

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Ubuntu 16.04/ PHP 7:&lt;/strong&gt; Lucas Hall has created an updated guide based off of this one that uses Ubuntu 16.04 with PHP 7, which can be viewed &lt;a href=&#34;https://lucasjhall.com/2016/08/06/munkireport-ubuntu-sql/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Welcome to the third part in our munki server setup series. In this section, we will download and configure &lt;a href=&#34;https://github.com/munkireport/munkireport-php&#34; target=&#34;_blank&#34;&gt;Munkireport-php&lt;/a&gt; on our munki server.&lt;/p&gt;

&lt;p&gt;Before we get to far you might want to head over to &lt;a href=&#34;https://clburlison.com/munkirepo-guide-part-1/&#34;&gt;Part 1 - Setting up the munki repo&lt;/a&gt; or &lt;a href=&#34;https://clburlison.com/munkirepo-guide-part-2/&#34;&gt;Part 2 - Setting up mandrill&lt;/a&gt;. Parts 1 and 2 are not technically required for MunkiReport by you will want to have an understanding of how the other components of your munki server work before setting up the reporting server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2014-10-23/mr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-install&#34;&gt;The Install&lt;/h1&gt;

&lt;p&gt;Munkireport is a web application written in php that displays useful stats about your munki fleet. The resources taken up by MunkiReport are quite small but like all web apps if you client base grows very large you will want to make sure the database can keep up. With that you can install MunkiReport on any compatible web-server (IIS, apache, or nginx) for this guide we will be using our munki server from Parts 1 &amp;amp; 2 as our reporting server.&lt;/p&gt;

&lt;p&gt;Part of this installation includes setting up MySQL as our database backend. SQLite is the default database but I highly recommend setting my MySQL since the &lt;a href=&#34;https://github.com/munkireport/munkireport-php/wiki/Performance&#34; target=&#34;_blank&#34;&gt;performance&lt;/a&gt; gains are high and setup only takes a few more steps, not to mention SQLite will start to choke when higher volumes of clients start to check-in with the reporting server.&lt;/p&gt;

&lt;p&gt;It is also important to note, I like MunkiReport to be hosted on a sub-directory. This means when connecting to MuniReport you will type [&lt;a href=&#34;http://yourserver.example.com/report/](&#34; target=&#34;_blank&#34;&gt;http://yourserver.example.com/report/](&lt;/a&gt;) to access the site. If you want a different setup, you will need to make the necessary changes.&lt;/p&gt;

&lt;h2 id=&#34;installing-required-software&#34;&gt;Installing Required Software&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update
sudo apt-get -y install nginx git php5-fpm php5-mysql php5-ldap
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;php5-ldap&lt;/code&gt; package is only needed if you are planning on connecting to an Active Directory or LDAP directory for authenticating to MunkiReport.&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;setup-mysql&#34;&gt;Setup MySQL&lt;/h2&gt;

&lt;p&gt;Lets install MySQL&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mysql-client mysql-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;This will prompt you to create the root mysql database account. Do not forget the password you set.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to tell MySQL to generate the directory structure it needs to store its databases and information. We can do this by typing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mysql_install_db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, you can optionally run a simple security script that will prompt you to modify some insecure defaults (this is highly recommended on production servers). Begin the script by typing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will need to enter the MySQL root password that you selected during installation.&lt;/p&gt;

&lt;p&gt;During the secure installation script it will ask if you want to change the root password. If you are happy with your MySQL root password, type &amp;ldquo;N&amp;rdquo; for no and hit &amp;ldquo;ENTER&amp;rdquo;. Afterwards, you will be prompted to remove some test users and databases. You should choice &amp;ldquo;Y&amp;rdquo; and hit &amp;ldquo;enter&amp;rdquo; through these prompts to remove the &amp;ldquo;unsafe&amp;rdquo; defaults from installation.&lt;/p&gt;

&lt;p&gt;Once the script has been run, MySQL is ready to go.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-database&#34;&gt;Creating the database&lt;/h3&gt;

&lt;p&gt;Lets create our MunkiReport database with the name of &lt;code&gt;munkireport&lt;/code&gt;. We will also create a database user and password. Change &lt;em&gt;USERNAME&lt;/em&gt; and &lt;em&gt;PASSWORD&lt;/em&gt; to your preference. Note the database username that is created below is what you will enter into your config.php in the following steps. It is bad practice to use the root account for database entry.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
echo &amp;quot;CREATE DATABASE munkireport CHARACTER SET utf8 COLLATE utf8_bin;&amp;quot; | mysql -u root -p
echo &amp;quot;CREATE USER &#39;USERNAME&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;PASSWORD&#39;;&amp;quot; | mysql -u root -p
echo &amp;quot;GRANT ALL PRIVILEGES ON munkireport.* TO &#39;USERNAME&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;PASSWORD&#39;;&amp;quot; | mysql -u root -p
echo &amp;quot;FLUSH PRIVILEGES;&amp;quot; | mysql -u root -p

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-php&#34;&gt;Configure php&lt;/h2&gt;

&lt;p&gt;Lets make one small change to the default php configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/php5/fpm/php.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the line, &lt;strong&gt;cgi.fix_pathinfo=1&lt;/strong&gt;, and change the &lt;strong&gt;1 to 0&lt;/strong&gt;. Also, uncomment this line to enable this security setting. The file should now look like the below excerpt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;---------------

; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP&#39;s
; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok
; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting
; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting
; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts
; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.
; http://php.net/cgi.fix-pathinfo
cgi.fix_pathinfo=0

---------------&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this number is kept as 1, the php interpreter will do its best to process the file that is as near to the requested file as possible. This is a possible security risk. If this number is set to 0, conversely, the interpreter will only process the exact file path—a much safer alternative. Save and Exit.&lt;/p&gt;

&lt;p&gt;Now, restart php-fpm for the change to take affect:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo service php5-fpm restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;downloading-munkireport&#34;&gt;Downloading MunkiReport&lt;/h2&gt;

&lt;p&gt;We are finally to the point that we can start getting MunkiReport setup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo git clone https://github.com/munkireport/munkireport-php /usr/share/nginx/html/report
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, lets create a link to our report folder for our local Ubuntu admin, this allows us to make modifications easier in the future.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /usr/share/nginx/html/report ~/report
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MunkiReport requires a config.php, this is your settings for MunkiReport. Below are some defaults that I think most users will want. For a full list of options please visit &lt;a href=&#34;https://github.com/munkireport/munkireport-php/blob/master/config_default.php&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will want to change  the following in your config.php file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sitename = change Company to something useful&lt;/li&gt;
&lt;li&gt;allow_migrations = you will want to change this to true for MunkiReport updates&lt;/li&gt;
&lt;li&gt;debug = change this to false if you don&amp;rsquo;t need debugging&lt;/li&gt;
&lt;li&gt;timezone = for your &lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34; target=&#34;_blank&#34;&gt;timezone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ssh = change &lt;em&gt;ladmin&lt;/em&gt; to your company local mac admin account&lt;/li&gt;
&lt;li&gt;locale = change to location&lt;/li&gt;
&lt;li&gt;lang = change to your language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The root account is created for you, for testing purposes. You will want to create your own admin account by visiting &lt;a href=&#34;http://yourserver.example.com/report/index.php?/auth/generate&#34; target=&#34;_blank&#34;&gt;http://yourserver.example.com/report/index.php?/auth/generate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a new &lt;code&gt;config.php&lt;/code&gt; file that stores our settings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /usr/share/nginx/html/report/config.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll want to copy/paste the entire section below, making changes where necessary. The last section of the config file deals with our MySQL database. You will want to change the username and password to match what you created in the previous step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php if ( ! defined( &#39;KISS&#39; ) ) exit;

$conf[&#39;index_page&#39;] = &#39;index.php?&#39;;
$conf[&#39;sitename&#39;] = &#39;Company - MunkiReport&#39;;
$conf[&#39;allow_migrations&#39;] = FALSE;
$conf[&#39;debug&#39;] = TRUE;
$conf[&#39;timezone&#39;] = @date_default_timezone_get(America/Chicago);
$conf[&#39;vnc_link&#39;] = &amp;quot;vnc://%s:5900&amp;quot;;
$conf[&#39;ssh_link&#39;] = &amp;quot;ssh://ladmin@%s&amp;quot;;
ini_set(&#39;session.cookie_lifetime&#39;, 43200);
$conf[&#39;locale&#39;] = &#39;en_US&#39;;
$conf[&#39;lang&#39;] = &#39;en&#39;;
$conf[&#39;keep_previous_displays&#39;] = TRUE;

/*
|===============================================
| Authorized Users of Munki Report
|===============================================
| Visit http://yourserver.example.com/report/index.php?/auth/generate to generate additional local values
*/
$auth_config[&#39;root&#39;] = &#39;$P$BUqxGuzR2VfbSvOtjxlwsHTLIMTmuw0&#39;; // Password is root

/*
|===============================================
| PDO Datasource
|===============================================
*/
$conf[&#39;pdo_dsn&#39;] = &#39;mysql:host=localhost;dbname=munkireport&#39;;
$conf[&#39;pdo_user&#39;] = &#39;munki&#39;;
$conf[&#39;pdo_pass&#39;] = &#39;munki&#39;;
$conf[&#39;pdo_opts&#39;] = array(PDO::MYSQL_ATTR_INIT_COMMAND =&amp;gt; &#39;SET NAMES utf8&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are an Active Directory shop at my work place and for that reason I really like the ability for MunkiReport to pull an AD group and give access (remember the php5-ldap package we installed earlier). Unfortunately, in my current testing this function is slightly broken at the moment. When attempting to login to MunkiReport using AD Group Authorization you will be presented a white screen. A refresh on the blank screen along with a &amp;ldquo;Resend form data&amp;rdquo; will get you to the dashboard. This is a pretty annoying inconvenience, so at this moment I have simply added our report administrators into the &amp;lsquo;allowed_users&amp;rsquo; line in my config.php.&lt;/p&gt;

&lt;p&gt;Below are the additional settings need to make Active Directory work with MunkiReport:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
// Below are the options for Active Directory user authorization
$conf[&#39;auth&#39;][&#39;auth_AD&#39;][&#39;account_suffix&#39;] = &#39;@example.com&#39;;
$conf[&#39;auth&#39;][&#39;auth_AD&#39;][&#39;base_dn&#39;] = &#39;dc=example,dc=come&#39;; //set to NULL to auto-detect
$conf[&#39;auth&#39;][&#39;auth_AD&#39;][&#39;domain_controllers&#39;] = array(&#39;server1.example.com&#39;,&#39;server2.example.com&#39;); //can be an array of servers
$conf[&#39;auth&#39;][&#39;auth_AD&#39;][&#39;admin_username&#39;] = &#39;admin&#39;; //if needed to perform the search
$conf[&#39;auth&#39;][&#39;auth_AD&#39;][&#39;admin_password&#39;] = &#39;munki_is_cool&#39;; //if needed to perform the search
$conf[&#39;auth&#39;][&#39;auth_AD&#39;][&#39;mr_allowed_users&#39;] = array(&#39;userA&#39;,&#39;userB&#39;,&#39;userC&#39;);
$conf[&#39;auth&#39;][&#39;auth_AD&#39;][&#39;mr_allowed_groups&#39;] = array(&#39;MunkiReportAdmins&#39;); //case sensitive

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-nginx-for-munkireport&#34;&gt;Configure nginx for MunkiReport&lt;/h2&gt;

&lt;p&gt;Lets configure nginx to use &lt;a href=&#34;http://yourserver.example.com/report&#34; target=&#34;_blank&#34;&gt;http://yourserver.example.com/report&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/nginx/sites-enabled/default
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure and change your &lt;code&gt;server_name&lt;/code&gt;. This file also takes care of our munki_repo from &lt;a href=&#34;https://clburlison.com/munkirepo-guide-part-1/&#34;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;

    root /usr/share/nginx/html;
    index index.php index.html index.htm;

    server_name munki;

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location /report {
        try_files $uri $uri/ =404;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
    }

    location /munki_repo/ {
      alias /usr/local/munki_repo/;
      autoindex off;
      auth_basic &amp;quot;Restricted&amp;quot;;
      auth_basic_user_file /etc/nginx/.htpasswd;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We must change our nginx default settings for php to work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/nginx/nginx.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look for &lt;code&gt;default_type  application/octet-stream;&lt;/code&gt; and comment this line out. Check out the below excerpt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;---------------

# server_names_hash_bucket_size 64;
        # server_name_in_redirect off;

        include /etc/nginx/mime.types;
        #default_type application/octet-stream; //comment me out for MunkiReport to work

        ##
        # Logging Settings
        ##

---------------&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test your nginx configuration run the following command. This will make sure that you have no errors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nginx -c /etc/nginx/nginx.conf -t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart Nginx to make the necessary changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You should now have a basic MunkiReport configuration up and running. Double check that everything is working by visiting &lt;a href=&#34;http://youserver.example.com/report/&#34; target=&#34;_blank&#34;&gt;http://youserver.example.com/report/&lt;/a&gt;. Remember the default username and password, &lt;code&gt;root&lt;/code&gt;. For more settings and additional information please visit the Wiki for &lt;a href=&#34;https://github.com/munkireport/munkireport-php/wiki&#34; target=&#34;_blank&#34;&gt;MunkiReport&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always feel free to drop a comment below or on Twitter. Feedback is always appreciated.&lt;/p&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Congrats!&lt;/strong&gt; You made it this far. Unfortunately you&amp;rsquo;re not done yet. You will likely run into an issue with request size on your munki clients as such please go read &lt;a href=&#34;https://clburlison.com/munkireport-error-fix/&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;hr /&gt;

&lt;h1 id=&#34;apendium-1-connecting-a-client-to-munkireport&#34;&gt;Apendium 1 - connecting a client to MunkiReport&lt;/h1&gt;

&lt;p&gt;If you would like to connect a single munki client to MunkiReport you can use the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /bin/bash -c &amp;quot;$(curl -s http://yourserver.example.com/report/index.php?/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;apendium-2-adding-munkireport-to-your-munki-repo&#34;&gt;Apendium 2 - adding MunkiReport to your munki_repo&lt;/h1&gt;

&lt;p&gt;To add multiple Munki clients to MunkiReport we should use munki. To get a generated plist file that you can drop into your _munki&lt;em&gt;repo/pkginfo&lt;/em&gt; directory run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://yourserver.example.com/report/index.php?/install/plist -o \
~/Desktop/MunkiReport.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output file will end up on your Desktop for easy transfer to your repo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles:&lt;br /&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-14-04&#34; target=&#34;_blank&#34;&gt;Install LEMP stack on Ubuntu 14.04&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://github.com/munkireport/munkireport-php/wiki&#34; target=&#34;_blank&#34;&gt;Munkireport Wiki&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;http://www.nbalonso.com/new-munkireport-php-2/&#34; target=&#34;_blank&#34;&gt;nbalonso Munkireport-php&lt;/a&gt;,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup Mandrill on Ubuntu 14.04 - Part 2</title>
      <link>https://clburlison.com/munkirepo-guide-part-2/</link>
      <pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/munkirepo-guide-part-2/</guid>
      <description>

&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; This article should only be used for reference at this time. Mandrill has been great for many years but no longer has an active maintainer. Please use MunkiWebAdmin 2 (mwa2) from &lt;a href=&#34;https://github.com/munki/mwa2&#34; target=&#34;_blank&#34;&gt;github.com/munki/mwa2&lt;/a&gt; instead.&lt;/p&gt;

&lt;/div&gt;


&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;This is Part 2 of a series on setting up a munki server on Ubuntu 14.04. Read &lt;a href=&#34;https://clburlison.com/blog/2014/10/06/munkirepo-guide-part-1/&#34;&gt;Part 1 here&lt;/a&gt;. This section goes over setting up &lt;a href=&#34;https://github.com/wollardj/Mandrill&#34; target=&#34;_blank&#34;&gt;Mandrill&lt;/a&gt; so we can edit our repo metadata files, modify manifests, and assign new software to our fleet using a web browser.&lt;/p&gt;

&lt;p&gt;A brief description of Mandrill.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Multi-user web front-end for managing a Munki repository. If you&amp;rsquo;re here because of MailChimp, my apologies but this isn&amp;rsquo;t the Mandrill you&amp;rsquo;re looking for. /wavehand&lt;/p&gt;

&lt;p&gt;Mandrill is a NodeJS web application written using the Meteor framework. It supports one database engine: MongoDB. There are no plans to support other engines, but fear not, mandrillctl will install and secure MongoDB for you. If you already have MongoDB running on your server via homebrew, you should probably remove that installation first, or use an alternate server.&lt;/p&gt;

&lt;p&gt;&amp;ndash;Joe Wollard&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2014-10-19/mandrill.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-install&#34;&gt;The Install&lt;/h1&gt;

&lt;p&gt;Lucky for us Joe, the developer, has excellent documentation for installation on Ubuntu. Unfortunately, the documentation is for an older version of Ubuntu and some of the commands need modification to work with 14.04 and this series. Instead of redirecting you back and forth between his guide and this, I decided to include all the commands required below without the descriptions. For more information on what/why you are doing something please reference the wiki &lt;a href=&#34;https://github.com/wollardj/Mandrill/wiki&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creating-users-groups&#34;&gt;Creating Users &amp;amp; Groups&lt;/h2&gt;

&lt;p&gt;Lets create the Mandrill user and munki group along with allow mandrill access to modify our munki repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo addgroup --system munki
sudo adduser --system _mandrill --ingroup munki --force-badname
sudo chown -R _mandrill:munki /usr/local/munki_repo/
sudo chmod -R 2774 /usr/local/munki_repo
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You should receive an error from creating the &amp;lsquo;munki&amp;rsquo; group if you went through &lt;a href=&#34;https://clburlison.com/munkirepo-guide-part-1/&#34;&gt;Part 1&lt;/a&gt;. This is fine move along.&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;install-build-tools&#34;&gt;Install build tools&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install git curl build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-nodejs&#34;&gt;Install NodeJS&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/
curl -O http://nodejs.org/dist/v0.10.26/node-v0.10.26-linux-x64.tar.gz
sudo tar --strip-components 1 -C /usr/local -zxf node-v0.10.26-linux-x64.tar.gz
rm node-v0.10.26-linux-x64.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-nginx-pm2&#34;&gt;Install Nginx &amp;amp; pm2&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install nginx
sudo npm install pm2 -g --unsafe-perm # updated from wiki

# install startup scripts to make sure pm2 and all its daemons
# respawn when the server reboots.
sudo pm2 startup ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuring-pm2&#34;&gt;Configuring pm2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&amp;ndash;direct from wiki start&amp;ndash;&lt;/em&gt;&lt;br /&gt;
Be sure to change ROOT_URL and PORT to values appropriate for your environment! If you&amp;rsquo;re running a MongoDB instance on another server, or if your MongoDB instance requires authentication, you should change MONGO_URL as well.&lt;/p&gt;

&lt;p&gt;One thing you should not change is instances as Mandrill is not currently aware of other instances of itself and will needlessly consume resources.&lt;br /&gt;
&lt;em&gt;&amp;ndash;end&amp;ndash;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo nano /usr/local/etc/mandrilld.json&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
[{
    &amp;quot;name&amp;quot;: &amp;quot;mandrilld&amp;quot;,
    &amp;quot;script&amp;quot;: &amp;quot;/usr/local/Mandrill/main.js&amp;quot;,
    &amp;quot;env&amp;quot;: {
        &amp;quot;ROOT_URL&amp;quot;: &amp;quot;http://192.168.20.133:3001&amp;quot;,
        &amp;quot;PORT&amp;quot;: &amp;quot;3001&amp;quot;,
        &amp;quot;MONGO_URL&amp;quot;: &amp;quot;mongodb://localhost:27017/Mandrill&amp;quot;,
        &amp;quot;MANDRILL_MODE&amp;quot;: &amp;quot;production&amp;quot;
    },
    &amp;quot;instances&amp;quot;: &amp;quot;1&amp;quot;,
    &amp;quot;error_file&amp;quot;: &amp;quot;/var/log/mandrill/mandrill-err.log&amp;quot;,
    &amp;quot;out_file&amp;quot;: &amp;quot;/var/log/mandrill/mandrill.log&amp;quot;,
    &amp;quot;pid_file&amp;quot;: &amp;quot;/var/run/mandrill.pid&amp;quot;
}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The log directory must exist before you start mandrilld for the first time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir /var/log/mandrill
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuring-nginx&#34;&gt;Configuring Nginx&lt;/h2&gt;

&lt;p&gt;If you read my Part 1 guide before October 19th you will want to follow the new steps from &lt;a href=&#34;https://clburlison.com/blog/2014/10/06/munkirepo-guide-part-1/#setting-up-nginx&#34;&gt;Part 1 - Setting up Nginx&lt;/a&gt;. These changes were made in order to accommodate Munkireport, which we will setup next.&lt;/p&gt;

&lt;p&gt;At this point, you have two options that you need to be aware of for using Mandrill:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the  default port 3001&lt;/li&gt;
&lt;li&gt;Setup a DNS A record for your server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You get these choices since we will be setting up Munkireport next. Since I am not in charge of the network at my workplace I will simply leave Nginx alone and connect via port 3001. If however you would like to access Mandrill via a sub domain name or alternate address you can follow the original setup steps below. Just make sure and change your server_name to a record that is not the current hostname of your server. This change is necessary since by default Mandrill needs redirects for both the root directory of your web-server and /mandrill to work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wollardj/Mandrill/wiki/Configuring-Nginx-%28Ubuntu%29&#34; target=&#34;_blank&#34;&gt;Configuring Nginx in Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-meteor&#34;&gt;Install Meteor&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# First, install meteor
curl https://install.meteor.com | /bin/sh

# next, install meteorite
sudo npm install -g meteorite
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-mongodb&#34;&gt;Install MongoDB&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 \
    --recv 7F0CEB10

echo &#39;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&#39; \
    | sudo tee /etc/apt/sources.list.d/mongodb.list

sudo apt-get update
sudo apt-get install mongodb-10gen
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-mandrill&#34;&gt;Installing Mandrill&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/wollardj/Mandrill.git

# If you want the latest source code, you&#39;re done. However,
# I suggest sticking with the latest release...
cd Mandrill
git checkout tags/`git tag -l | tail -n 1`

sudo mrt bundle Mandrill.tar.gz # updated from wiki

sudo mkdir /usr/local/Mandrill
sudo tar --strip-components 1 -C /usr/local/Mandrill -zxf Mandrill.tar.gz

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets manually start our mandrill site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pm2 start /usr/local/etc/mandrilld.json
sudo service mongodb start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit to verify that everything is working [&lt;a href=&#34;http://munki:3001](&#34; target=&#34;_blank&#34;&gt;http://munki:3001](&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;mandrill-settings&#34;&gt;Mandrill Settings&lt;/h2&gt;

&lt;p&gt;Log into the web portal with the default username &lt;em&gt;admin&lt;/em&gt; and password &lt;em&gt;admin&lt;/em&gt;. You will obviously want to change this password to something more secure. Under the mandrill settings tab you will want to change your repo path to &lt;code&gt;/usr/local/munki_repo/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2014-10-19/mandrill_settings.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Mandrill is setup! Stay tuned for Part 3, setting up Munkireport.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles:&lt;br /&gt;
&lt;a href=&#34;https://github.com/wollardj/Mandrill/wiki&#34; target=&#34;_blank&#34;&gt;Mandrill Wiki&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup a Munki repo on Ubuntu 14.04 - Part 1</title>
      <link>https://clburlison.com/munkirepo-guide-part-1/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/munkirepo-guide-part-1/</guid>
      <description>

&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;As you might have guessed from my previous &lt;a href=&#34;https://clburlison.com/blog/2014/10/02/reposado-guide/&#34;&gt;post&lt;/a&gt;, I am trying to standardize at work. Part of this was to move many core OS X services away from OS X Server and towards Ubuntu. This will allow us to use our existing virtualization infrastructure. After reposado the next big service was our munki repo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2014-10-06/munki.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/munki/munki&#34; target=&#34;_blank&#34;&gt;Munki&lt;/a&gt; is a very powerful open source tool for patch management and software updates for OS X clients. The client component is pretty easy to install but the server component can be a bit more tricky for newer administrators. The goal of this guide is to walk through setting up the server web share with http basic authentication (read simply security), and lastly setup samba so we can remote into our web server to manage files.&lt;/p&gt;

&lt;p&gt;In the past, our munki_repo has been shared using apache but due to some research and a few internal tests I will be using nginx as the backend in this guide.&lt;/p&gt;

&lt;p&gt;Since our Munki setup has many add-on projects including: &lt;a href=&#34;https://github.com/wollardj/Mandrill&#34; target=&#34;_blank&#34;&gt;mandrill&lt;/a&gt;,  &lt;a href=&#34;https://github.com/munkireport/munkireport-php/&#34; target=&#34;_blank&#34;&gt;munkireport-php&lt;/a&gt;, and our in-house rsync replication I will be splitting this series into multiple parts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2014-10-06/managed_software_center.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-install&#34;&gt;The Install&lt;/h1&gt;

&lt;p&gt;It is good practice to make sure our Ubuntu server is fully patched before we start. Then we will install &lt;em&gt;git, curl, build-essential, nginx, apache2-utils, and samba&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installing-required-software&#34;&gt;Installing Required Software&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
sudo apt-get update
sudo apt-get upgrade
sudo apt-get -y install git curl build-essential nginx apache2-utils samba

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setup-the-directories&#34;&gt;Setup the directories:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
sudo mkdir /usr/local/munki_repo
sudo mkdir -p /etc/nginx/sites-enabled/
ln -s /usr/local/munki_repo/ ~/
cd /usr/local/munki_repo
sudo mkdir catalogs client_resources icons manifests pkgs pkgsinfo

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-the-service-accounts-set-directory-permissions&#34;&gt;Creating the service accounts &amp;amp; set directory permissions:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
sudo addgroup --system munki
sudo adduser --system munki --ingroup munki
sudo usermod -a -G munki $USER # Adds the current console user to munki group
sudo usermod -a -G munki www-data # Adds web user to munki group
sudo chown -R $USER:munki /usr/local/munki_repo
sudo chmod -R 2774 /usr/local/munki_repo

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setting-up-nginx&#34;&gt;Setting up Nginx&lt;/h2&gt;

&lt;p&gt;Nginx is fast, light-weight, and uses a fraction of the resources that Apache uses. But don&amp;rsquo;t take my word for it there are lots of &lt;a href=&#34;http://arstechnica.com/business/2011/11/a-faster-web-server-ripping-out-apache-for-nginx/&#34; target=&#34;_blank&#34;&gt;other reason&lt;/a&gt; why &lt;a href=&#34;http://wiki.nginx.org/WhyUseIt&#34; target=&#34;_blank&#34;&gt;you might want to use Nginx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nginx&amp;rsquo;s installation on Ubuntu is very similar to Apache. All of its config files are stored in &lt;em&gt;/etc/nginx&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Lets backup the original default file create and create our own.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mv /etc/nginx/sites-enabled/default ~/default.bkup
sudo nano /etc/nginx/sites-enabled/default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure and change the server_name to match your server&amp;rsquo;s Fully Qualified Domain Name (FQDN) or IP.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;server {
  listen 80 default_server;
  listen [::]:80 default_server ipv6only=on;

  root /usr/share/nginx/html;
  index index.php index.html index.htm;

  server_name munki; # Change this to your FQDN.

  location /munki_repo/ {
    alias /usr/local/munki_repo/;
    autoindex off;
    auth_basic &amp;quot;Restricted&amp;quot;;
    auth_basic_user_file /etc/nginx/.htpasswd;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally start the nginx service.&lt;br /&gt;
&lt;code&gt;sudo /etc/init.d/nginx start&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Nginx Issues:&lt;/strong&gt; To have Nginx check your configuration for issues run the following command: &lt;br&gt; &lt;code&gt;nginx -c /etc/nginx/nginx.conf -t&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;


&lt;h3 id=&#34;securing-your-munki-repo&#34;&gt;Securing your munki_repo&lt;/h3&gt;

&lt;p&gt;For my purpose, I will be securing my munki_repo with simple http basic authentication. Depending on the needs of your organization this might be enough but you might need to look into ssl and other advanced options. If you are interesting in these options check out the &lt;a href=&#34;https://github.com/munki/munki/wiki&#34; target=&#34;_blank&#34;&gt;munki wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create an http user and password&lt;/strong&gt;
&lt;code&gt;sudo htpasswd -c /etc/nginx/.htpasswd munkihttpuser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The tool will prompt you to enter a password (make it strong).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
New password: ******
Re-type new password: ******
Adding password for user munkihttpuser

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The structure of the htpasswd is &lt;code&gt;login:password_hash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We must reload the nginx service to update the reflected change.&lt;br /&gt;
&lt;code&gt;sudo /etc/init.d/nginx reload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now when you try to access your website, [&lt;a href=&#34;http://yourmunkiserver/munki_repo/](&#34; target=&#34;_blank&#34;&gt;http://yourmunkiserver/munki_repo/](&lt;/a&gt;), you will notice a browser prompt that asks you to enter the login and password. Enter the details that you used while creating the .htpasswd file. The prompt does not allow you to access the website until you enter the right credentials. The munki client supports this security feature with the AdditionalHttpHeaders key &lt;a href=&#34;https://github.com/munki/munki/wiki/Using-Basic-Authentication#configuring-the-clients-to-use-a-password&#34; target=&#34;_blank&#34;&gt;more info&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you do not want to secure your munki repo you can remove this setting in the above nginx config file by removing the two lines that start with &lt;code&gt;auth_basic&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;setting-up-samba&#34;&gt;Setting up Samba&lt;/h2&gt;

&lt;p&gt;Now we just need a way to mount our munki_repo on a mac so we can do administrative things. Samba uses a separate set of passwords than the standard Linux system accounts (stored in /etc/samba/smbpasswd), so you&amp;rsquo;ll need to create a Samba password for yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo smbpasswd -a munki
#output on the following lines
New SMB password: *****
Retype new SMB password: ****
Added user munki.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to share the munki_repo. Once &amp;ldquo;smb.conf&amp;rdquo; has loaded, add this to the very end of the file:&lt;br /&gt;
&lt;code&gt;sudo nano /etc/samba/smb.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
[munki_repo]
path = /usr/local/munki_repo
available = yes
valid users = munki      
read only = no
browseable = yes
public = no
writable = yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test for errors with the config file with: &lt;code&gt;testparm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we must restart samba.&lt;br /&gt;
&lt;code&gt;sudo /etc/init.d/smbd reload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From your mac you will be able to access the munki_repo with the following: &lt;code&gt;smb://munki.example.com/munki_repo&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We now have a working munki_repo fully configured and ready for use to start importing packages into the repo. If you are really new to Munki, this takes care of the &amp;ldquo;Demonstration Setup&amp;rdquo; section from the &lt;a href=&#34;https://github.com/munki/munki/wiki&#34; target=&#34;_blank&#34;&gt;munki wiki&lt;/a&gt;. To start populating Munki with manifests, packages, and more I would recommend using &lt;a href=&#34;https://github.com/hjuutilainen/munkiadmin&#34; target=&#34;_blank&#34;&gt;MunkiAdmin&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles:&lt;br /&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-configure-the-nginx-web-server-on-a-virtual-private-server&#34; target=&#34;_blank&#34;&gt;How to configure Nginx&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;http://wiki.nginx.org/Configuration&#34; target=&#34;_blank&#34;&gt;Configuration - Official nginx documentation&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://help.ubuntu.com/community/How%20to%20Create%20a%20Network%20Share%20Via%20Samba%20Via%20CLI%20(Command-line%20interface/Linux%20Terminal)%20-%20Uncomplicated,%20Simple%20and%20Brief%20Way!&#34; target=&#34;_blank&#34;&gt;Samba Setup&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-set-up-http-authentication-with-nginx-on-ubuntu-12-10&#34; target=&#34;_blank&#34;&gt;Basic Http Auth with Nginx&lt;/a&gt;,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Show Help Desk Information</title>
      <link>https://clburlison.com/show-helpdesk-info/</link>
      <pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/show-helpdesk-info/</guid>
      <description>

&lt;p&gt;Display useful information on your Desktop using Geektool. Make troubleshooting network issues for your end users easier. Find your hostname faster. The amount of useful information is limitless. If you can script it&amp;hellip;you can display it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://clburlison.com/images/2014-07-14/current_info.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;My geektools results.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;hr /&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Firstly, I take no credit for this valuable resource. All credit should go to Erik Gomez from the munki-dev &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!topic/munki-dev/jxs3ljEFbJY&#34; target=&#34;_blank&#34;&gt;mailing list&lt;/a&gt;. All I have done is modified the script to work in my environment. Modifications included removing some excess &lt;code&gt;if&lt;/code&gt;/ &lt;code&gt;then&lt;/code&gt; statements, remove the MAC address, adding current SSID, and a few other tweaks so the script played nicely as a profile. The writing is on the wall, mcx is slowing dying or at least it is becoming a less preferred method of managing preferences.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://clburlison.com/images/2014-07-14/eriks_info.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Erik&amp;#39;s original geektools results.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt; &lt;em&gt;-You will want to download and save these somewhere.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://projects.tynsoe.org/en/geektool/download.php&#34; target=&#34;_blank&#34;&gt;Geektool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/timsutton/mcxToProfile&#34; target=&#34;_blank&#34;&gt;mcxToProfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/timsutton/make-profile-pkg&#34; target=&#34;_blank&#34;&gt;make-profile-pkg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/clburlison/af2a1afe01fb9aff9288&#34; target=&#34;_blank&#34;&gt;Gist files for this project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://clburlison.com/images/2014-07-14/Geektool-login-item.mobileconfig&#34;&gt;Geektool-login-item.mobileconfig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h1&gt;

&lt;p&gt;In short, this is simply a bash script that Geektool is running in the background. It defaults to refreshing every 30 seconds, though you can modify this in the &lt;code&gt;org.tynsoe.geeklet.shell.plist&lt;/code&gt; file, which has negligible performance toll on Mac clients. You want the refresh rate low so when the network drops or you get a new IP address you can easily see changes.&lt;/p&gt;

&lt;h2 id=&#34;the-script&#34;&gt;The Script&lt;/h2&gt;

&lt;script src=&#34;//gist.github.com/clburlison/af2a1afe01fb9aff9288.js?file=geektool_script.sh&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;how-do-you-use-it&#34;&gt;How do you use it?&lt;/h1&gt;

&lt;p&gt;Great now what? Well that script does nothing for you. Unless you want to manually copy and paste on every computer&amp;hellip;for every user profile&amp;hellip;in your entire fleet. So lets automate that process a bit. If you have not done so already you will want to download all five (5) of the requirements above. This includes two command lines tools created by Tim Sutton, Geektool.app, the gist with all the necessary plist files, and a profile to launch Geektool at login.&lt;/p&gt;

&lt;h2 id=&#34;modify-the-script&#34;&gt;Modify the script&lt;/h2&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you wish to use the script as is, feel free to skip below to creating the profiles.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;This will be the most time consuming process so start small. Lets start by changing the Help Desk Phone Number in my script. Open the main plist &lt;code&gt;org.tynsoe.geeklet.shell.plist&lt;/code&gt; from the gist zip file. Scroll down to line 116 and change the following line to something useful.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#### Technology Support
echo &amp;quot;For Help Desk Support call: x3819&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now is a good time to mention that the script inside of the plist has been modified from the original &lt;code&gt;geektool_script.sh&lt;/code&gt; script. The plist file needs to have &lt;code&gt;&amp;amp;&lt;/code&gt; encoded as &lt;code&gt;&amp;amp;amp;&lt;/code&gt;. For that reason if you make to many changes to the script you will need to test for compatibility with GeekTool. Testing will be outside the scope of this post but a hint if you are running into errors: open Geektool manually and paste your script directly into the application.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-profiles&#34;&gt;Creating the profiles&lt;/h2&gt;

&lt;p&gt;Note for this to work, I have found that having two profiles was the easiest solution but your milage may vary. The main reason for splitting the profiles into two, was to use one profile for launching Geektool at login and the second profile deals with organization settings for Geektool: refresh rate, script, color of the text, etc.&lt;/p&gt;

&lt;h3 id=&#34;part-1-login-profile&#34;&gt;Part 1 - Login profile&lt;/h3&gt;

&lt;p&gt;With that out of the way, I will go ahead and say I cheated and created the &lt;code&gt;Geektool-login-item.mobileconfig&lt;/code&gt; with my profile server since it was easier than creating from scratch. You should have downloaded the referenced profile under the requirement section. You can modify this profile to have your organization name by opening the file in a &lt;a href=&#34;http://www.barebones.com/products/textwrangler/&#34; target=&#34;_blank&#34;&gt;text editing&lt;/a&gt; application (aka not TextEdit.app). Search for &amp;ldquo;Birdville ISD&amp;rdquo; and change to your organization name. Save and exit.&lt;/p&gt;

&lt;h3 id=&#34;part-2-organization-profile&#34;&gt;Part 2 - Organization profile&lt;/h3&gt;

&lt;p&gt;Now we are going to use Tim Sutton&amp;rsquo;s mcxToProfile. This tool will combine the three plist files below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.tynsoe.geeklet.shell.plist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.tynsoe.GeekTool.plist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.tynsoe.geektool3.plist&lt;/code&gt; into a single usable profile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put mcxToProfile.py in the same directory as your three plist files. After changing directory to the folder with your files run the following in Terminal:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating your profile&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mcxToProfile.py -r org.tynsoe.geeklet.shell.plist org.tynsoe.GeekTool.plist \
org.tynsoe.geektool3.plist --identifier BISD-GeekTool --displayname=BISD-GeekTool --manage Often
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will want to change your &lt;code&gt;identifier&lt;/code&gt; and &lt;code&gt;displayname&lt;/code&gt; to something useful for your organization.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;This will create a second profile with the name of your &amp;ldquo;identifier + .mobileconfig&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;deploying-your-profiles&#34;&gt;Deploying your Profiles&lt;/h2&gt;

&lt;p&gt;This is kind of the bonus round. If you have made it this far you should have two working profiles (one was already made for you). If you have a MDM server you could simply upload the profiles to that, you could have users double click the files, etc. I however choose to install the profiles via a package for my users.&lt;/p&gt;

&lt;p&gt;Luckily, Tim has made our life easy once again. This time we will use &lt;code&gt;make-profile-pkg&lt;/code&gt; to create a package containing our profiles.  If you are using munki it is even easier, as this tool can even automatically import into your munki repository.&lt;/p&gt;

&lt;p&gt;Making sure your .mobileconfig files and &lt;code&gt;make-profile-pkg.py&lt;/code&gt; are in the same directory. Run the following to create your install package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make_profile_pkg.py --munki-import Geektool-login-item.mobileconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the following, you will need to modify the profile name with your correct file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make_profile_pkg.py --munki-import identifier.mobileconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will want to remove the &lt;code&gt;&amp;ndash;munki-import&lt;/code&gt; flag if you just want to create a package.&lt;/p&gt;

&lt;/div&gt;


&lt;h1 id=&#34;ending-notes&#34;&gt;Ending Notes&lt;/h1&gt;

&lt;p&gt;Hopefully you find this as useful as I did. If you run into any issues feel free to contact me on Twitter or email.&lt;/p&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Geektool.app needs to be located in /Applications/.&lt;/li&gt;
&lt;li&gt;A logout/login is required after the profiles are installed for the information to be displayed.&lt;/li&gt;
&lt;li&gt;If one or both of your profiles are removed&amp;hellip;bye bye Desktop Info.&lt;/li&gt;
&lt;li&gt;This script is only good for network interfaces up to 5. If you need more add them in the script.&lt;/li&gt;
&lt;li&gt;Tested with 10.7 Lion through 10.9 Mavericks with success.&lt;/li&gt;
&lt;li&gt;The text is white by default. If your desktop background is a bright color then you will want to change the text color using Geektool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;

&lt;p&gt;Again, a giant thank you to Erik Gomez for sharing with the munki community. Without his original documentation I would have never gotten this to work. Thanks to Tim Sutton for providing awesome tools.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles: &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!topic/munki-dev/jxs3ljEFbJY&#34; target=&#34;_blank&#34;&gt;Using GeekTool to show HelpDesk Information&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a development munki_repo</title>
      <link>https://clburlison.com/creating-a-development-munki-repo/</link>
      <pubDate>Sat, 17 May 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/creating-a-development-munki-repo/</guid>
      <description>

&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Outdated:&lt;/strong&gt; These instructions are no longer current and are considered deprecated. This document remains for historical reasons only. Faster and easier methods exist for creating development environments.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;I created a vagrant box that allows you create a completely self contained munki_repo for testing purposes. With the usage of &lt;a href=&#34;https://puphpet.com&#34; target=&#34;_blank&#34;&gt;PuPHPet&lt;/a&gt; the process was quite easy.&lt;/p&gt;

&lt;p&gt;This article describes basic usage and setup for the project &lt;strong&gt;munki.dev&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;purpose&#34;&gt;Purpose&lt;/h1&gt;

&lt;p&gt;Setting up and maintaining a web server can be a pretty complex job. Apache is great at actually serving files but the initial setup can be tedious. Thanks to the many resources that are available on the internet this can become less tedious. Which brings me to the true purpose of the post&amp;hellip;a way to setup a web server so I can test software patches using Munki.&lt;/p&gt;

&lt;p&gt;In case you are unaware, Munki is a popular way to manage software installs on Mac OSX created by Greg Neagle. Learning Munki can be a time consuming process due to the many layers of the management system. One of the more important layers is the munki_repo, which is what this project is dedicated at helping with. This will allow you to setup a development environment which is self-contained on your administrative machine. Once the initial setup has been made you will be able to test changes locally without the need for a second machine.&lt;br /&gt;
&lt;em&gt;Disclaimer&lt;/em&gt;: this vagrant box is not designed for usage in production.&lt;/p&gt;

&lt;h1 id=&#34;required-software&#34;&gt;Required software&lt;/h1&gt;

&lt;p&gt;To use this project you will need to make sure you have the following software installed on your machine. All of these products can be obtained for free from the links provided. Below the prerequisites, each of the individual pieces of software have a short description explaining what they do. If you have some or any experience with the software needed for this you will likely want to skip past to the &lt;a href=&#34;./#installation&#34;&gt;Installation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;software-prerequisites-for-munki-dev&#34;&gt;Software prerequisites for munki.dev&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vagrant  &lt;a href=&#34;http://www.vagrantup.com&#34; target=&#34;_blank&#34;&gt;http://www.vagrantup.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VirtualBox  &lt;a href=&#34;https://www.virtualbox.org&#34; target=&#34;_blank&#34;&gt;https://www.virtualbox.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Git  &lt;a href=&#34;http://sourceforge.net/projects/git-osx-installer/&#34; target=&#34;_blank&#34;&gt;http://sourceforge.net/projects/git-osx-installer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Munkitools &lt;a href=&#34;https://github.com/munki/munki/releases&#34; target=&#34;_blank&#34;&gt;https://github.com/munki/munki/releases&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h3&gt;

&lt;p&gt;This is the backbone of this project. Vagrant&amp;rsquo;s job is to interface directly with Virtualbox to create the virtual machine, download a ubuntu box, configure the box with puppet (plus other magic), and finally make any final changes needed for the munki.dev environment to work as intended. If this is the first project that are using Vagrant let me go ahead and say do not freak out. You do not actually have to know how to use Vagrant to take advantage of this project.&lt;/p&gt;

&lt;h3 id=&#34;virtualbox&#34;&gt;Virtualbox&lt;/h3&gt;

&lt;p&gt;A virtualization product created by Oracle that is free to use. At the time of this writing, I am using version 4.3.8, though munki.dev and Vagrant should not have issues with other versions so long as no incompatibilities arise from future releases of the software.&lt;/p&gt;

&lt;h3 id=&#34;git&#34;&gt;Git&lt;/h3&gt;

&lt;p&gt;Git is a way to store files and the changes that go along with those files in a logical manner. For this project, Git is the tool that will be used to download munki.dev and potentially a test munki_repo from from GitHub.
If you would like to learn more, I recommend reading this &lt;a href=&#34;http://git-scm.com/book/en/Getting-Started-Git-Basics&#34; target=&#34;_blank&#34;&gt;Git Basics&lt;/a&gt; page.&lt;/p&gt;

&lt;h3 id=&#34;munkitools&#34;&gt;Munkitools&lt;/h3&gt;

&lt;p&gt;This is the client software needed for Munki to work on Macintosh Clients created by Greg Neagle. This technically is not a requirement for the administrative machine but will make your life easier when making changes to the munki_repo. For that reason alone it is strongly recommended. Any clients that you wish to connect to this local webshare will require munkitools to be installed.&lt;/p&gt;

&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;Installing is quite straight forward once you have the required software. Simply issue the following commands in Terminal. You will want to &lt;code&gt;cd&lt;/code&gt; to a directory of your choosing. I will pick &lt;code&gt;~/src/mine&lt;/code&gt;. This will download the project from github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/src/mine/
cd ~/src/mine/
git clone https://github.com/clburlison/munki.dev.git munki.dev
cd munki.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will pull down all the necessary files from Github.&lt;/p&gt;

&lt;h2 id=&#34;adding-the-hostname&#34;&gt;Adding the hostname&lt;/h2&gt;

&lt;p&gt;One change you will want to make is adding munki.dev to your &lt;code&gt;/etc/hosts&lt;/code&gt; file. This allows you to connect to the web share as munki.dev instead of the IP address (default 192.168.56.150).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following line to the bottom of your file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.56.150  munki.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save with Control + X.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: at this current time there a known bug that prevents usage of the hostname from working when using an alias folder, aka Option 2 of the &lt;code&gt;bootstrap.sh&lt;/code&gt;. Until this is fixed, please use the IP address for testing purposes instead of the hostname. Follow the issue &lt;a href=&#34;https://github.com/clburlison/munki.dev/issues/1&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;munki-repo-modifications&#34;&gt;munki_repo Modifications&lt;/h2&gt;

&lt;p&gt;Make these changes in the &lt;code&gt;bootstrap.sh&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;You can point this virtual machine to a munki_repo that exists on your local admin machine. This means theoretically you could have a complete copy of your production munki_repo on your localhost or an external hard drive. This would allow you to point to that folder and start testing/development immediately.&lt;/p&gt;

&lt;p&gt;This will default to downloading a the testing munki_repo since this will allow new users to get started with the least amount of work. To get the virtual machine started run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;client-settings&#34;&gt;Client Settings&lt;/h1&gt;

&lt;p&gt;At this point, the munki_repo should be up and running. You will want to setup a client computer to connect to the munki_repo. To do this you will need to run the following command on a client computer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo defaults write /Library/Preferences/ManagedInstalls SoftwareRepoURL &amp;quot;http://192.168.56.150/munki_repo&amp;quot;
sudo defaults write /Library/Preferences/ManagedInstalls ClientIdentifier testing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should ready to test away. Open up &lt;code&gt;/Applications/Managed Software Center.app&lt;/code&gt; if you are testing Munkitools v2 or &lt;code&gt;/Applications/Utilities/Managed Software Update.app&lt;/code&gt; if you are testing Munkitools v1.&lt;/p&gt;

&lt;h1 id=&#34;ending-notes&#34;&gt;Ending notes&lt;/h1&gt;

&lt;p&gt;If you have any problems please create an &lt;a href=&#34;https://github.com/clburlison/munki.dev/issues&#34; target=&#34;_blank&#34;&gt;Issue&lt;/a&gt; on Github. Let me know what you think on Twitter, Email, etc.&lt;/p&gt;

&lt;p&gt;Also, go check out &lt;a href=&#34;https://github.com/hjuutilainen/munkiadmin&#34; target=&#34;_blank&#34;&gt;MunkiAdmin&lt;/a&gt; for a GUI to modify your munki_repo. Another great resource is &lt;a href=&#34;https://github.com/wollardj/Mandrill&#34; target=&#34;_blank&#34;&gt;Mandrill&lt;/a&gt;, a web front end for managing you munki_repo. Lastly, check out the &lt;a href=&#34;https://github.com/munki/munki/wiki&#34; target=&#34;_blank&#34;&gt;Getting Started with Munki&lt;/a&gt; guide if you have any questions about munki.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>