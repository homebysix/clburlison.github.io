<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Osx on clburlison</title>
    <link>https://clburlison.com/tags/osx/feed/index.xml</link>
    <description>Recent content in Osx on clburlison</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>clburlison@gmail.com (Clayton Burlison)</managingEditor>
    <webMaster>clburlison@gmail.com (Clayton Burlison)</webMaster>
    <copyright>(c) 2014 - 2017 Clayton Burlison</copyright>
    <atom:link href="https://clburlison.com/tags/osx/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>10.12.4 locationd</title>
      <link>https://clburlison.com/10.12.4-locationd/</link>
      <pubDate>Mon, 03 Apr 2017 09:12:44 -0500</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/10.12.4-locationd/</guid>
      <description>&lt;p&gt;New with 10.12.4, Apple has decided to protect the locationd LaunchDaemon with System Integrity Protection (SIP).&lt;/p&gt;

&lt;p&gt;If you are not aware the locationd daemon is used for Location Services. This is the process that drives: FindMyMac, &amp;ldquo;Set time zone automatically using current location&amp;rdquo;, it allows applications to locate your computer, and more.&lt;/p&gt;

&lt;p&gt;Some points to take away from this change:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;this modification happened during a point release&lt;/li&gt;
&lt;li&gt;this path is not in &lt;code&gt;/System/Library/Sandbox/rootless.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;this restricts the ability to load and unload the daemon in any automated fashion&lt;/li&gt;
&lt;li&gt;this breaks many of the bash scripts floating around that are used to enable the auto time zone feature&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can verify this change with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls -laO /System/Library/LaunchDaemons/com.apple.locationd.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice &lt;code&gt;restricted&lt;/code&gt; in the output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-rw-r--r--  1 root  wheel  restricted,compressed 573 Aug 29  2016 /System/Library/LaunchDaemons/com.apple.locationd.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means you are no longer able to unload the daemon with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo launchctl unload /System/Library/LaunchDaemons/com.apple.locationd.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you try you will receive the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/System/Library/LaunchDaemons/com.apple.locationd.plist: Operation not permitted while System Integrity Protection is engaged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can verify that the service is indeed running with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo launchctl list | grep locationd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seeing as how you might want to make changes to location services you work around this restriction with a &lt;code&gt;killall -9 locationd&lt;/code&gt;. At least for now&amp;hellip;&lt;/p&gt;

&lt;p&gt;Hat tap to Michael Pinto (@pintom) and Balmes Pavlov (@bp) for the ping that lead to this discovery in the MacAdmins Slack.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>python2 and tls</title>
      <link>https://clburlison.com/python2-and-tls/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/python2-and-tls/</guid>
      <description>

&lt;p&gt;For your Friday viewing pleasure I present the following cartoon.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://imgs.xkcd.com/comics/nerd_sniping.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Credit: https://xkcd.com/356/&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;

&lt;p&gt;In case you do not know &lt;a href=&#34;http://stackoverflow.com/a/7406994&#34; target=&#34;_blank&#34;&gt;Apple deprecated the usage of OpenSSL&lt;/a&gt; in favor of Common Crypto, back with the release of OS X Lion (10.7) in 2011. On Apple&amp;rsquo;s latest operating system macOS Sierra (10.12) OpenSSL is currently at version &amp;ldquo;0.9.8zh&amp;rdquo; with very little indication that it will get updated. Now this is a specific build that Apple created and it does have a few back-ported fixes however this version doesn&amp;rsquo;t support TLSv1.1 or TLSv1.2.&lt;/p&gt;

&lt;p&gt;If you do not keep up with the latest and greatest in the security world do not worry you are not alone. That is a full time job after all so it is hard for me to keep up with it myself. TLSv1.1 and TLSv1.2 are important because they offer better security. They specifically protect you against two nasty vulnerabilities, &lt;a href=&#34;http://www.webopedia.com/TERM/S/ssl_beast.html&#34; target=&#34;_blank&#34;&gt;BEAST&lt;/a&gt; and &lt;a href=&#34;https://www.us-cert.gov/ncas/alerts/TA14-290A&#34; target=&#34;_blank&#34;&gt;POODLE&lt;/a&gt; if you want more reading.&lt;/p&gt;

&lt;h1 id=&#34;fun-stuff&#34;&gt;Fun stuff&lt;/h1&gt;

&lt;p&gt;So &lt;a href=&#34;https://michaellynn.github.io/about/&#34; target=&#34;_blank&#34;&gt;frogor&lt;/a&gt; recently worked on a way to patch the ssl module that comes with the system python for macOS. You can see his proof of concept in the &lt;a href=&#34;https://github.com/pudquick/tlsssl&#34; target=&#34;_blank&#34;&gt;tlsssl&lt;/a&gt; git repo.&lt;/p&gt;

&lt;p&gt;The process for using it looks a little like (partly pseudo code):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install homebrew&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew install openssl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;git clone his repo&lt;/li&gt;
&lt;li&gt;download source files from the github/cpython repo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python setup.py build&lt;/code&gt; to compile the project&lt;/li&gt;
&lt;li&gt;Copy the two dylib files to the correct directory&lt;/li&gt;
&lt;li&gt;Copy the &lt;code&gt;_tlsssl.so&lt;/code&gt; and &lt;code&gt;tlsssl.py&lt;/code&gt; files to a path that python can import&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Followed with the following code to use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import tlsssl as ssl
import urllib2
ctx = ssl.create_default_context()
a = urllib2.urlopen(&#39;https://fancyssl.hboeck.de/&#39;, context=ctx)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works! Not too bad for a few minutes of work. However, &lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/issues/20424&#34; target=&#34;_blank&#34;&gt;brew&lt;/a&gt; is a &lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/issues/47450&#34; target=&#34;_blank&#34;&gt;big&lt;/a&gt; red &lt;a href=&#34;https://github.com/Homebrew/legacy-homebrew/issues/45625&#34; target=&#34;_blank&#34;&gt;flag&lt;/a&gt;. Thankfully the maintainers learned their lessons and &lt;em&gt;finally&lt;/em&gt; resolved my main complaint with &lt;a href=&#34;https://github.com/Homebrew/brew/releases/tag/1.0.0&#34; target=&#34;_blank&#34;&gt;Homebrew v1.0.0&lt;/a&gt; specifically the following &lt;a href=&#34;https://github.com/Homebrew/brew/releases/tag/1.0.0&#34; target=&#34;_blank&#34;&gt;commit&lt;/a&gt;. Homebrew is great for developers and single user machines but once you are on a multiuser system another tool needs to be used.&lt;/p&gt;

&lt;h1 id=&#34;more-fun-stuff&#34;&gt;More fun stuff&lt;/h1&gt;

&lt;p&gt;For the above patch to work we need an updated version of OpenSSL that supports the updated protocols and we need the patched ssl module. We also would ideally like those files to be placed on the disk and what better than a native package to do so. Before we can get to that step, currently the OpenSSL Software Foundation is maintaining two branches of their code the 1.1.0 series and the 1.0.2 series as Long Term Support (LTS) version&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Since even the latest releases of the python project are still using the &lt;a href=&#34;https://github.com/python/cpython/pull/459&#34; target=&#34;_blank&#34;&gt;1.0.2 series&lt;/a&gt;, as of 6 days ago, along with many other projects I decided we would stick with that series as well.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/google/macops&#34; target=&#34;_blank&#34;&gt;MacOps team&lt;/a&gt; at Google has been vendoring their own versions of Python and OpenSSL for years, they even open sourced some of their &lt;a href=&#34;https://github.com/google/macops/tree/master/packages&#34; target=&#34;_blank&#34;&gt;build scripts&lt;/a&gt;. My only issue was the lack of customization. Too many variables being hard coded made it difficult to customize for my needs. So I set out to redo all of the build scripts with a new project &lt;a href=&#34;https://github.com/clburlison/vendored&#34; target=&#34;_blank&#34;&gt;vendored&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although the project isn&amp;rsquo;t complete it has lots of functionality finished. It mainly allows you to create a single package for all the bits frogor did with some bonus built in.&lt;/p&gt;

&lt;h1 id=&#34;even-more-fun-stuff&#34;&gt;Even more fun stuff&lt;/h1&gt;

&lt;p&gt;This is great now I can sit and watch my computer build all these projects for 5-10 minutes.. Or you could skip that and go straight to the &lt;a href=&#34;https://github.com/clburlison/vendored/releases&#34; target=&#34;_blank&#34;&gt;releases page&lt;/a&gt;. Here you&amp;rsquo;ll find pre-built releases that I&amp;rsquo;ve created. These come with a few limitations, mainly you don&amp;rsquo;t get to pick the install paths, package identifiers, or signing cert.&lt;/p&gt;

&lt;p&gt;Before we pick apart the output package let&amp;rsquo;s look at the stock python settings. Run the following on your machine if you want to follow along:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/clburlison/vendored.git
cd vendored/tests
/usr/bin/python version_tester.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output will be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Our python is located: /usr/bin/python
Our python version: 2.7.10
Our openssl is: OpenSSL 0.9.8zh 14 Jan 2016
------------------------------------------------------------------
SUCCESS: Connection was made using TLS 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the version of OpenSSL and TLS version being used.&lt;/p&gt;

&lt;p&gt;Now lets go ahead and download the latest &lt;code&gt;vendored_tlsssl.pkg&lt;/code&gt; file from the latest &lt;a href=&#34;https://github.com/clburlison/vendored/releases/latest&#34; target=&#34;_blank&#34;&gt;releases page&lt;/a&gt;. When you inspect it with &lt;a href=&#34;http://www.mothersruin.com/software/SuspiciousPackage/&#34; target=&#34;_blank&#34;&gt;Suspicious Package&lt;/a&gt; you note that it drops a few files on disk specifically in the &lt;code&gt;/Library/vendored&lt;/code&gt; directory and a single file in &lt;code&gt;/Library/Python/2.7/site-packages&lt;/code&gt; directory named &lt;code&gt;000vendored.pth&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you deem the package safe go ahead and install it on your machine. Now lets run the same script again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/python version_tester.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with the output of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Our python is located: /usr/bin/python
Our python version: 2.7.10
Our openssl is: OpenSSL 1.0.2k  26 Jan 2017
------------------------------------------------------------------
SUCCESS: Connection was made using TLS 1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have a winner! The best part is because how we are adding the patched ssl module to our system python path it becomes very high priority in the list. Verify for yourself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/python -m site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with the output of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sys.path = [
    &#39;/Users/vagrant&#39;,
    &#39;/Library/vendored/tlsssl&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload&#39;,
    &#39;/Library/Python/2.7/site-packages&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python&#39;,
    &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/PyObjC&#39;,
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that &lt;code&gt;/Library/vendored/tlsssl&lt;/code&gt; comes before all of the &lt;code&gt;/System/Library&lt;/code&gt; paths?&lt;/p&gt;

&lt;p&gt;That means using this patch is completely seamless. Just install the single 5.15 MB package and use python2 just like normal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import urllib2
a = urllib2.urlopen(&#39;https://fancyssl.hboeck.de/&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you are off to the races.&lt;/p&gt;

&lt;h1 id=&#34;more-fun-to-come&#34;&gt;More fun to come&lt;/h1&gt;

&lt;p&gt;At this time, vendored still has more work. Specifically on creating self contained Python2, Python3 and Ruby. It also needs some love on automating the build of all the tools. Right now &lt;code&gt;build.py&lt;/code&gt; is completely unfinished. I also would like to automate the process of building the distribution style packages.&lt;/p&gt;

&lt;h1 id=&#34;articles&#34;&gt;Articles&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/7406994&#34; target=&#34;_blank&#34;&gt;Details on Apple&amp;rsquo;s deprecation of OpenSSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/macops/tree/master/packages&#34; target=&#34;_blank&#34;&gt;Google MacOps Packaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pudquick/tlsssl&#34; target=&#34;_blank&#34;&gt;frogor&amp;rsquo;s tlsssl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/brew/releases/tag/1.0.0&#34; target=&#34;_blank&#34;&gt;Homebrew v1.0 release notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;OpenSSL supported code branches &lt;a href=&#34;https://www.openssl.org/source/&#34; target=&#34;_blank&#34;&gt;https://www.openssl.org/source/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Zendesk Automation for Mail</title>
      <link>https://clburlison.com/zendesk-automation-for-mail/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/zendesk-automation-for-mail/</guid>
      <description>

&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Before I get into the material of this post I want to refer you to an article written last week by Sal Soghoian, &lt;a href=&#34;https://www.macstories.net/stories/app-extensions-are-not-a-replacement-for-user-automation/&#34; target=&#34;_blank&#34;&gt;click here&lt;/a&gt;. The information that he provides regarding user automation is exactly what makes the process described in this post possible.&lt;/p&gt;

&lt;p&gt;In case you are not aware, Zendesk is a web-based helpdesk application that is cloud hosted and quite popular. They have an email API that allows agents to create a ticket with a simple email. The power behind this API starts to show when you are an agent that happens to get many emails that could be tickets. &lt;em&gt;cough&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now with that out of the way let&amp;rsquo;s look at some automation for Zendesk.&lt;/p&gt;

&lt;!---
# Apple Mail Stationary

This was the method I attempted first however it turned out to be a big flop. Mail Stationary can only be applied to new emails.

The Mail Stationary is great for creating new tickets. However what is a use has emailed you the issue directly. The simple solution is, use Zendesk&#39;s same email API commands. The only problem is stationary emails are only allowed for new emails in Apple mail.

1. Download stationary
  This step is given because no matter how you create your stationary it won&#39;t work. It&#39;s actually much easier to just start with this temporary file rather than using Apple&#39;s Mail to start the creation process.

  [[ INSERT ZIP DONWLOAD HERE ]]


1. Double click the .mailstationery file to load it into Apple Mail.
1. Close Mail.app if you have it open

Now lets modify the file.

1. Open the stationary directory `~/Library/Containers/com.apple.mail/Data/Library/Application Support/Mail/Stationery/Apple/Contents/Resources/Custom/Contents/Resources`
1. Rename your temp.mailstationery to whatever name you wish your stationery to have (don&#39;t include spaces)
1. Right click your stationary and click &#34;Show Package Contents&#34;
1. Go down the directory Contents &gt; Resources and open &#39;content.html&#39; in a text editor
1. Replace the text with whatever you wish to message to say. Make sure and include the break (`&lt;br&gt;`) tag after every space. Apple&#39;s Mail.app is actually reading this file as an html file. However for Zendesk to read your meta-data these must be plain text. Also, make sure and include your email signature here if you wish to do so. Stationary emails will **NOT** include your default signature.
1. Save the file when finished
1. Now modify your &#39;Description.plist&#39; changing your Display Name, Folder Name, and TO address accordingly.
1. Save your file when finished
1. Open Apple Mail
1. Create a new message
1. Click on the Stationary button (VERIFY this button is enabled by default)
1. Scroll down to &#39;Custom&#39;
1. Select your template

At this point if you wish to add the stationary to your favorites just drag it up to the favorites folder. This gives you an easy way to create ticket all from your email. Just make sure and modify any of the command tags.
---&gt;

&lt;h1 id=&#34;automator&#34;&gt;Automator&lt;/h1&gt;

&lt;p&gt;Zendesk has a great article on &lt;a href=&#34;https://support.zendesk.com/hc/en-us/articles/203691006-Updating-ticket-properties-from-your-inbox&#34; target=&#34;_blank&#34;&gt;Updating Ticket Properties from You Inbox&lt;/a&gt; that gives an overview of what the mail API does and how it works. This post will extend on the API to help automate the process. We are going to use an Automator service to type all of the metadata fields. It should be noted that this process will work in Outlook and Apple Mail for macOS. An example of the output can be seen below:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://clburlison.com/images/2017-01-18/mail_api_example_2.png&#34; alt=&#34;Example api metadata&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Example metadata for the email API. Image credit Zendesk.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;ol&gt;
&lt;li&gt;You can download a template service from &lt;a href=&#34;https://github.com/clburlison/automator_services/archive/master.zip&#34; target=&#34;_blank&#34;&gt;github.com/clburlison/automator_services&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unzip the archive file and double-click on the &lt;code&gt;_AssignZendeskTicket.workflow&lt;/code&gt; file.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you see the following popup select &amp;ldquo;Open in Automator&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2017-01-18/automator_prompt.png&#34; alt=&#34;automator prompt&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will see the following AppleScript action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;on run {input, parameters}
tell application &amp;quot;System Events&amp;quot;
  keystroke &amp;quot;support@example.zendesk.com&amp;quot;
  keystroke tab
  keystroke tab
  keystroke tab
  keystroke tab
  #keystroke &amp;quot;#requester&amp;quot;
  #keystroke space
  #keystroke return
  keystroke &amp;quot;#assignee jane.doe@example.com&amp;quot;
  keystroke return
  keystroke &amp;quot;#location Some location&amp;quot;
  keystroke return
  keystroke &amp;quot;#group IT Staff&amp;quot;
  keystroke return
  keystroke &amp;quot;#status open&amp;quot;
  keystroke return
  keystroke &amp;quot;#priority normal&amp;quot;
  keystroke return
  keystroke &amp;quot;#type incident&amp;quot;
  keystroke return
  keystroke &amp;quot;#public false&amp;quot;
  keystroke return
  #keystroke return
  #keystroke &amp;quot;Hi ___ENTER_NAME_HERE,&amp;quot;
  #keystroke return
  #keystroke return
  #keystroke &amp;quot;MESSAGE_HERE.&amp;quot;
  #keystroke return
  keystroke return
end tell
end run
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will want to modify many of the lines to match your location, group, default status, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notice that I have the &lt;code&gt;#requester&lt;/code&gt; metadata field commented out with a hash (&lt;code&gt;#&lt;/code&gt;), this is due to a Zendesk setting that we have enabled (you might need to uncomment this)&lt;/li&gt;
&lt;li&gt;I also have a few additional lines at the end for comments if you want to add to the ticket on creation.&lt;/li&gt;
&lt;li&gt;Lastly, I have four (4) &lt;code&gt;keystroke tab&lt;/code&gt; lines this is due to me enabling the &amp;ldquo;Bcc&amp;rdquo; field so delete one of the tabs if you don&amp;rsquo;t have this enabled.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you have made all the changes that you want you will want to save and close the file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now double click on the &lt;code&gt;_AssignZendeskTicket.workflow&lt;/code&gt; file once again, this time selecting &amp;ldquo;Install&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2017-01-18/automator_prompt.png&#34; alt=&#34;automator prompt&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After the service has been installed the workflow will be copied to &lt;code&gt;~/Library/Services/&lt;/code&gt;. In case you need to locate the service to make changes in the future.&lt;/p&gt;

&lt;p&gt;To use the service start a new email (or forward an existing email) in Apple Mail or Outlook. Go to the application name in the menu bar » Services » select &lt;code&gt;AssignZendeskTicket&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2017-01-18/assign_ticket.png&#34; alt=&#34;Assign ticket&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you wish to add a keyboard shortcut&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;strong&gt;System Preferences&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;Keyboard » Shortcuts » Services&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Now assign your service a keyboard shortcut. I used Command + Option + H (⌘ + ⌥ + H)
&lt;img src=&#34;https://clburlison.com/images/2017-01-18/services.png&#34; alt=&#34;Services&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Resources:&lt;br /&gt;
&lt;a href=&#34;https://support.zendesk.com/hc/en-us/articles/203691006-Updating-ticket-properties-from-your-inbox&#34; target=&#34;_blank&#34;&gt;Updating Ticket Properties from You Inbox&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;http://apple.stackexchange.com/a/87989&#34; target=&#34;_blank&#34;&gt;Automatically Inserting Text Globally&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;http://alvinalexander.com/blog/post/mac-os-x/applescript-simulating-enter-key&#34; target=&#34;_blank&#34;&gt;applescript-simulating-enter-key&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;http://eastmanreference.com/complete-list-of-applescript-key-codes/&#34; target=&#34;_blank&#34;&gt;Complete list of AppleScript key codes&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://support.apple.com/kb/PH13916?locale=en_US&#34; target=&#34;_blank&#34;&gt;OS X Mavericks: Create keyboard shortcuts for apps&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AutoWake</title>
      <link>https://clburlison.com/autowake/</link>
      <pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/autowake/</guid>
      <description>

&lt;p&gt;Apple has some pretty nice energy savings options built into macOS. Most of these options are tucked nicely inside of the Energy Saver pane of System Preferences.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2016-10-10/EnergySaver.png&#34; alt=&#34;Energy Saver Panel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The above settings get written to the &lt;code&gt;com.apple.AutoWake&lt;/code&gt; preference and looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults read /Library/Preferences/SystemConfiguration/com.apple.AutoWake
{
    RepeatingPowerOff =     {
        eventtype = shutdown;
        time = 1020;
        weekdays = 127;
    };
    RepeatingPowerOn =     {
        eventtype = wakepoweron;
        time = 420;
        weekdays = 31;
    };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;weekdays&#34;&gt;Weekdays&lt;/h1&gt;

&lt;p&gt;Some of these values are a bit opaque once they are written to the preferences domain. For example, when you set the &lt;code&gt;Every Day&lt;/code&gt; option in the above screenshot this value is written in the &lt;code&gt;weekdays&lt;/code&gt; key with a value of &lt;code&gt;127&lt;/code&gt;. So what does that value actually refer to? Each day gets a value starting from one that doubles with each passing day.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Weekdays values

  1 - Monday
  2 - Tuesday
  4 - Wednesday
  8 - Thursday
  16 - Friday
  32 - Saturday
  64 - Sunday
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To select every day of the week you add all of the values together: &lt;code&gt;1+2+4+8+16+32+64 = 127&lt;/code&gt;. While weekdays would be: &lt;code&gt;1+2+4+8+16 = 31&lt;/code&gt;. The math is quite simple but easy to forget that this specific aspect of the system starts the day on Monday.&lt;/p&gt;

&lt;h1 id=&#34;time&#34;&gt;Time&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;time&lt;/code&gt; value is configured as time after 00:00, or midnight, in seconds. Examples below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4 am
  60m x 4h = 240s

1:30 pm
  60m x 13.5h = 810s

5:00 pm
  60m x 17h = 1020s
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;profile&#34;&gt;Profile&lt;/h1&gt;

&lt;p&gt;If you have gotten this far you might be wondering why any of the information above matters? If you have ever needed to create a configuration profile for Energy Saver, understanding these values allow you to customize the options without having to use a GUI like Profile Manager.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.EnergySaver.desktop.Schedule&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
	&amp;lt;key&amp;gt;RepeatingPowerOff&amp;lt;/key&amp;gt;
	&amp;lt;dict&amp;gt;
		&amp;lt;key&amp;gt;eventtype&amp;lt;/key&amp;gt;
		&amp;lt;string&amp;gt;shutdown&amp;lt;/string&amp;gt;
		&amp;lt;key&amp;gt;time&amp;lt;/key&amp;gt;
		&amp;lt;integer&amp;gt;1200&amp;lt;/integer&amp;gt;
		&amp;lt;key&amp;gt;weekdays&amp;lt;/key&amp;gt;
		&amp;lt;integer&amp;gt;127&amp;lt;/integer&amp;gt;
	&amp;lt;/dict&amp;gt;
	&amp;lt;key&amp;gt;RepeatingPowerOn&amp;lt;/key&amp;gt;
	&amp;lt;dict&amp;gt;
		&amp;lt;key&amp;gt;eventtype&amp;lt;/key&amp;gt;
		&amp;lt;string&amp;gt;wakepoweron&amp;lt;/string&amp;gt;
		&amp;lt;key&amp;gt;time&amp;lt;/key&amp;gt;
		&amp;lt;integer&amp;gt;420&amp;lt;/integer&amp;gt;
		&amp;lt;key&amp;gt;weekdays&amp;lt;/key&amp;gt;
		&amp;lt;integer&amp;gt;31&amp;lt;/integer&amp;gt;
	&amp;lt;/dict&amp;gt;
&amp;lt;/dict&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a full profile example check out Nick McSpadden&amp;rsquo;s &lt;a href=&#34;https://github.com/nmcspadden/Profiles/blob/4ad119b6274c8f3cd6150bd2414761e02ea55c73/EnergySaver.mobileconfig#L85-L96&#34; target=&#34;_blank&#34;&gt;EnergySaver.mobileconfig&lt;/a&gt;. &lt;em&gt;Note:&lt;/em&gt; Nick&amp;rsquo;s profile contains other energy saver options that you will likely want to include and/or modify.&lt;/p&gt;

&lt;h1 id=&#34;random&#34;&gt;Random&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;RepeatingPowerOff&lt;/code&gt; &amp;gt; &lt;code&gt;eventtype&lt;/code&gt; string actually accepts three types: &lt;code&gt;restart&lt;/code&gt;, &lt;code&gt;sleep&lt;/code&gt;, and &lt;code&gt;shutdown&lt;/code&gt;. Unfortunately the system will only read one &lt;code&gt;RepeatingPowerOff&lt;/code&gt; dict. That means you are unable to get creative and say restart Monday-Friday at 8pm and shutdown Saturday-Sunday at 3pm.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Links:&lt;br /&gt;
&lt;a href=&#34;https://support.apple.com/kb/PH18583&#34; target=&#34;_blank&#34;&gt;OS X Yosemite: Schedule a time for your Mac to turn on or off or go to sleep&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://support.apple.com/en-us/HT201988&#34; target=&#34;_blank&#34;&gt;OS X: Setting a startup or shut down time&lt;/a&gt;,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Demystify Office 2016 for Mac</title>
      <link>https://clburlison.com/demystify-office2016/</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/demystify-office2016/</guid>
      <description>

&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Microsoft Office 2016 for Mac had a &lt;a href=&#34;https://macops.ca/whats-wrong-with-the-office-2016-volume-license-installer/&#34; target=&#34;_blank&#34;&gt;rough&lt;/a&gt; &lt;a href=&#34;https://macops.ca/the-office-for-mac-2016-volume-license-installer-two-months-later/&#34; target=&#34;_blank&#34;&gt;start&lt;/a&gt; &lt;a href=&#34;http://www.richard-purves.com/?p=79&#34; target=&#34;_blank&#34;&gt;for&lt;/a&gt; &lt;a href=&#34;https://derflounder.wordpress.com/2015/08/05/creating-an-office-2016-15-12-3-installer/&#34; target=&#34;_blank&#34;&gt;sure&lt;/a&gt;. With that being said things have gotten better and quite rapidly. This post will focus on where Office 2016 for Mac currently stands, commonly asked questions, best practices, and solutions for updates.&lt;/p&gt;

&lt;p&gt;This post should serve as a overview of the changes to Office 2016 (O2016) for Mac from about November 2015 to Present (January 14th).&lt;/p&gt;

&lt;p&gt;Before we can get too far into this post it needs to be noted that none of this would be possible without the hard work and support of the following individuals. Contact info is in the form of Twitter/Slack handle. William Smith (&lt;a href=&#34;https://twitter.com/meck&#34; target=&#34;_blank&#34;&gt;@meck&lt;/a&gt;/&lt;a href=&#34;https://macadmins.slack.com/team/talkingmoose&#34; target=&#34;_blank&#34;&gt;@talkingmoose&lt;/a&gt;) took it on himself to reach out to the Apple Platform Experience (APEX) Team at Microsoft and helped push them into our community Slack group. Paul Bowden (&lt;a href=&#34;https://twitter.com/mrexchange&#34; target=&#34;_blank&#34;&gt;@mrexchange&lt;/a&gt;/&lt;a href=&#34;https://macadmins.slack.com/team/pbowden&#34; target=&#34;_blank&#34;&gt;@pbowden&lt;/a&gt;) and Erik Schwiebert (&lt;a href=&#34;https://twitter.com/schwieb&#34; target=&#34;_blank&#34;&gt;@schwieb&lt;/a&gt;/&lt;a href=&#34;https://macadmins.slack.com/team/schwieb&#34; target=&#34;_blank&#34;&gt;@schwieb&lt;/a&gt;) are both Software Engineers at Microsoft inside the APEX team. They have been very responsive to feedback from the community.&lt;/p&gt;

&lt;p&gt;And so you don&amp;rsquo;t think I&amp;rsquo;m making up facts I will be supplying quotes from Microsoft&amp;rsquo;s pbowden on almost everything. You will need to join our MacAdmins Slack group if you wish to view the source. Sign up page is &lt;a href=&#34;http://macadmins.org&#34; target=&#34;_blank&#34;&gt;http://macadmins.org&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Video Presentation:&lt;/strong&gt; Paul Bowden gave a presentation, 2016.01.20, at the University of Utah&amp;rsquo;s Mac Managers meeting which can be viewed &lt;a href=&#34;https://stream.lib.utah.edu/index.php?c=details&amp;amp;id=11705&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. It covers many of the topics from this post in video form.&lt;/p&gt;

&lt;/div&gt;


&lt;hr /&gt;

&lt;h1 id=&#34;office-packages&#34;&gt;Office Packages&lt;/h1&gt;

&lt;p&gt;Five months into Office 2016 being out and there are &lt;s&gt;five&lt;/s&gt; six different kinds of installers/updaters. Plus a bonus serializer package. This table should help clarify what is available and the differences between each package.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Comments&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Requires Live System&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;File Size★&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SKU-less★★&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Installer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Contains all apps. Good for O365 installations. Can be used in combination with the VL Serializer to create a VL Installer without needing to visit Microsoft&amp;rsquo;s Volume Licensing Service Center (VLSC). &lt;a href=&#34;#method-1---office-365-installation&#34;&gt;Additional info&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;~1.3 GB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Volume License (VL)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Installer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Contains all apps. Available from VLSC only. Has Serializer package embed. &lt;a href=&#34;#method-2---volume-license-installation&#34;&gt;Additional info&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;~1.3 GB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Standalone&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Installer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Available from &lt;a href=&#34;http://macadmins.software&#34;&gt;http://macadmins.software&lt;/a&gt;. These install packages can be combined with the VL Serializer below to have a custom install solution of just &amp;ldquo;one&amp;rdquo; or a &amp;ldquo;handful&amp;rdquo; of O2016 apps★★★. These will also work with O365 installs. OneNote standalone not available (obtain from Mac App Store [MAS] if needed).&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;~550 MB per app&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Standalone VL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Installer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Available from VLSC only. These are standalone install packages that contain your VL serial. They can be used to have a custom install solution of just &amp;ldquo;one&amp;rdquo; or a &amp;ldquo;handful&amp;rdquo; of O2016 apps★★★.&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;~1 GB per app&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Combo&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Update&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;These updates can take any previous Office 2016 installed app and make them current. These are per app upgrade packages, a difference from Office 2011&amp;rsquo;s combo update packages.&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;~1 GB per app&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Delta&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Update&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;These were first publicly available with 15.18. These significantly reduce the file size that is required to update an Office app. Also per app upgrade packages. &lt;a href=&#34;#delta-updates&#34;&gt;Additional info&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;~780 MB for suite&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;VL Serializer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Serializer&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;This is a special package that was released with 15.17. The purpose of this package is to apply the Office serialization process to the SKU-less installations. &lt;a href=&#34;#vl-serializer&#34;&gt;more info&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;~5 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If &lt;strong&gt;Requires Live System&lt;/strong&gt;, is &amp;lsquo;yes&amp;rsquo; these installers must be ran on fully booted Mac. IE - You must see the loginwindow or be logged into the physical Mac that you are installing O2016 on. If this option is &amp;lsquo;no&amp;rsquo; you can bake these installers into a base image using tools like &lt;a href=&#34;https://github.com/MagerValp/AutoDMG&#34; target=&#34;_blank&#34;&gt;AutoDMG&lt;/a&gt;, &lt;a href=&#34;http://www.deploystudio.com/&#34; target=&#34;_blank&#34;&gt;DeployStudio&lt;/a&gt;, or Casper&amp;rsquo;s Image creation process.&lt;/p&gt;

&lt;p&gt;★All file sizes should be considered estimates and subject to change&lt;br /&gt;
★★This installer is often the most confusing as it is also commonly called: &lt;strong&gt;Full Suite&lt;/strong&gt;, &lt;strong&gt;O365&lt;/strong&gt;, or a &lt;strong&gt;Retail&lt;/strong&gt; installer. They are all the same.&lt;br /&gt;
★★★This level of customization can also be achieved by using a &lt;a href=&#34;#i-dont-want-to-install-mau-is-that-supported&#34;&gt;choice xml&lt;/a&gt; with the SKU-less and VL installers.&lt;/p&gt;

&lt;h1 id=&#34;how-do-i-install-o2016&#34;&gt;How do I install O2016?&lt;/h1&gt;

&lt;p&gt;You should install the package that Microsoft is giving you. &lt;strong&gt;PERIOD&lt;/strong&gt;. End of story. Stop taking their package apart and &amp;ldquo;fixing things&amp;rdquo;. It is fine to poke your nose under the hood but there is absolutely no reason for you to be re-packaging anything Office 2016 related. This was a common practice with Office 2011 and at the start of Office 2016. All issues that were resolved with re-packaging have been fixed by Microsoft. Microsoft has listened and now it is your turn. STAHP.&lt;/p&gt;

&lt;h2 id=&#34;method-1-office-365-installation&#34;&gt;Method 1 - Office 365 installation&lt;/h2&gt;

&lt;p&gt;You can download a SKU-less installer from your VLSC dashboard or from &lt;a href=&#34;http://macadmins.software&#34; target=&#34;_blank&#34;&gt;http://macadmins.software&lt;/a&gt;. Both locations point to the same file as it a public release. This installer is deployed via Apple&amp;rsquo;s Installer Application (command line &amp;amp; GUI) and can be deployed via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple Remote Desktop&lt;/li&gt;
&lt;li&gt;Munki&lt;/li&gt;
&lt;li&gt;Casper&lt;/li&gt;
&lt;li&gt;While at the loginwindow&lt;/li&gt;
&lt;li&gt;&lt;s&gt;And can be baked into an image&lt;/s&gt; There is currently a bug in the postflight script such that the correct target drive is not selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It all-around should be good to go!&lt;/p&gt;

&lt;h2 id=&#34;method-2-volume-license-installation&#34;&gt;Method 2 - Volume License Installation&lt;/h2&gt;

&lt;p&gt;If you are a Volume License (VL) customer your first step is to log into the VLSC and download the latest Office 2016 for Mac iso file. Inside of this file you will find the latest VL Installer package and the VL Serializer package. At this time, the VLSC has 15.17 however 15.18 has been released. Microsoft is working to sync the development and VLSC teams so that the latest update is available on the VLSC faster.&lt;/p&gt;

&lt;p&gt;This installer is deployed via Apple&amp;rsquo;s Installer Application (command line &amp;amp; GUI) and can be deployed via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple Remote Desktop&lt;/li&gt;
&lt;li&gt;Munki&lt;/li&gt;
&lt;li&gt;Casper&lt;/li&gt;
&lt;li&gt;While at the loginwindow&lt;/li&gt;
&lt;li&gt;And can &lt;strong&gt;NOT&lt;/strong&gt; be baked into an image. This is due to how the serialization process works.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your options are to now deploy the VL installer package or you can now download the latest SKU-less installer package (&lt;a href=&#34;http://macadmins.software&#34; target=&#34;_blank&#34;&gt;http://macadmins.software&lt;/a&gt;) to deploy. When you use the second option you are able to deploy the SKU-less installer and then apply your VL Serializer package to create a supported install. This is a kind of &amp;ldquo;future proof&amp;rdquo; solution as you would not have to access the VLSC again to receive updates.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;third&lt;/strong&gt;, and slightly less preferred (personal opinion) option would be to download the Standalone Installer(s) from &lt;a href=&#34;http://macadmins.software&#34; target=&#34;_blank&#34;&gt;http://macadmins.software&lt;/a&gt;. After one or more Standalone installs have taken place you can run the VL Serializer in order to properly serialize your computers. This solution looks like it might be the most flexible upfront however, the same can be accomplished by using a &lt;a href=&#34;#i-dont-want-to-install-mau-is-that-supported&#34;&gt;choice xml&lt;/a&gt; (detail later in this post). Plus, after two standalone installers you would be much better off with the SKU-less installer package due to file size. With that said it is supported, I however do not believe it is the correct workflow for 99% of Mac Admins.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;VLSC won’t be updated with the 15.17 build until first week of January. While the portal team is working on getting faster at making new builds available, the underlying reason for releasing the VL Serializer separately is so that you can take the Office 365/Retail (aka SKU-less) installer from future builds (15.18, 15.19, etc), deploy it, run the Serializer, and you have a fully up to date VL install. &lt;u&gt;This is a fully supported mechanism for deployment&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1449897132003874&#34; target=&#34;_blank&#34;&gt;source link #1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;munki&#34;&gt;Munki&lt;/h2&gt;

&lt;p&gt;If you are a munki shop pick one of the methods above and run the following to import Office 2016 into your repo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## VL Installer or SKU-less Installer

$ munkiimport /path/to/Microsoft_Office_2016_Installer.pkg \
--name=MSOffice2016 \
--catalog=testing \
--minimum_os_version=10.10 \
--developer=Microsoft \
--category=Productivity \
--description=&amp;quot;Unmistakably Office, designed for Mac.

The new versions of Word, Excel, PowerPoint, Outlook and OneNote provide the best of both worlds for Mac users - the familiar Office experience paired with the best of Mac.

If you already use Office on a PC or iPad, you will find yourself right at home in Office 2016 for Mac. It works the way you expect, with the familiar ribbon interface and powerful task panes. Mac users will appreciate the modernized Office experience and the integration of Mac capabilities like Full Screen view and Multi-TouchTM gestures. With full Retina display support, your Office documents look sharper and more vibrant than ever.

Office for Mac is cloud-connected, so you can quickly get to the documents you’ve recently used on other devices and pick up where you left off. New, built-in document sharing tools make it easy to invite teammates to work on a document together. When sharing documents, you won’t have to worry about losing content or formatting, as Office for Mac offers unparalleled compatibility with Office on PCs, tablets, phones and online.&amp;quot; \
--blocking_application=&amp;quot;Microsoft Autoupdate&amp;quot; \
--blocking_application=&amp;quot;Microsoft Outlook&amp;quot; \
--blocking_application=&amp;quot;Microsoft Excel&amp;quot; \
--blocking_application=&amp;quot;Microsoft PowerPoint&amp;quot; \
--blocking_application=&amp;quot;Microsoft Word&amp;quot; \
--blocking_application=&amp;quot;Microsoft OneNote&amp;quot; \
--unattended_install

## VL Installer (only required if using the SKU-less Installer). The preinstall_script is located below.
$ munkiimport /path/to/Microsoft_Office_2016_VL_Serializer.pkg \
--name=MSOffice2016_Serializer \
--catalog=testing \
--developer=Microsoft \
--category=Productivity \
--update_for=MSOffice2016 \
--preinstall_script=/path/to/preinstall_script \
--unattended_install

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The VL Serializer should have the following preinstall script. This will help users who incorrectly copied com.microsoft.office.licensingV2.plist to their machine.&lt;br /&gt;
(&lt;a href=&#34;https://gist.github.com/clburlison/ac182c465ff40429aa1a/archive/e2729d9724fd08ed630e878193f75effc2159aa6.zip&#34; target=&#34;_blank&#34;&gt;download link&lt;/a&gt;)
&lt;script src=&#34;//gist.github.com/clburlison/ac182c465ff40429aa1a.js?file=preinstall_script&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;If you wish to implement a choice xml file for munki you will want to copy and paste the &lt;code&gt;installer_choices_xml&lt;/code&gt; array from the &lt;code&gt;office2016_munki.xml&lt;/code&gt; file into your Office 2016 pkginfo (&lt;a href=&#34;https://gist.github.com/clburlison/8fd09ae20de4279281f4/archive/89a8735ac42fd634389e89f0f45c80e8f0e3bf3b.zip&#34; target=&#34;_blank&#34;&gt;download link&lt;/a&gt;). Also, if you wish to apply an icon supply the &lt;code&gt;--icon_path=/path/to/MSOffice2016.png&lt;/code&gt; key (the icon I used can be downloaded below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2016-01-14/MSOffice2016.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Right Click &amp;gt; Save Image As&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Munki - Installs Arrays&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are planning on having a hybrid setup with MAU and munki both pushing updates to Office 2016 applications I highly recommend adding an install array to your Office 2016 installer. I also recommend this if your users have admin access and might &amp;ldquo;accidentally&amp;rdquo; delete an office application that you want to make sure doesn&amp;rsquo;t disappear. This can be done two ways, during the &lt;code&gt;munkiimport&lt;/code&gt; of your installer or by running &lt;code&gt;makepkginfo&lt;/code&gt; and manually pasting the install array into your pkginfo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: In order for the following to work the installer you are importing must be first installed on your admin machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
## via munkiimport (appended to the above example)

$ munkiimport /path/to/Microsoft_Office_2016_Installer.pkg \
...
--file &amp;quot;/Applications/Microsoft Excel.app&amp;quot; \
--file &amp;quot;/Applications/Microsoft OneNote.app&amp;quot; \
--file &amp;quot;/Applications/Microsoft Outlook.app&amp;quot; \
--file &amp;quot;/Applications/Microsoft PowerPoint.app&amp;quot; \
--file &amp;quot;/Applications/Microsoft Word.app&amp;quot; \
--file &amp;quot;/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app&amp;quot; \
...
--unattended_install

## via makepkginfo

$ makepkginfo \
--file &amp;quot;/Applications/Microsoft Excel.app&amp;quot; \
--file &amp;quot;/Applications/Microsoft OneNote.app&amp;quot; \
--file &amp;quot;/Applications/Microsoft Outlook.app&amp;quot; \
--file &amp;quot;/Applications/Microsoft PowerPoint.app&amp;quot; \
--file &amp;quot;/Applications/Microsoft Word.app&amp;quot; \
--file &amp;quot;/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;casper&#34;&gt;Casper&lt;/h2&gt;

&lt;p&gt;I was going to try and give resources for Casper&amp;hellip;then I realized how completely unqualified for this section. Luckily Rich Trouton &lt;a href=&#34;https://derflounder.wordpress.com/2016/01/14/creating-an-office-2016-15-18-0-installer/&#34; target=&#34;_blank&#34;&gt;has got you covered&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using his method you could add a &lt;a href=&#34;#i-dont-want-to-install-mau-is-that-supported&#34;&gt;choice xml&lt;/a&gt; file if you wanted to customize your installation. Inside of Packages under the &amp;ldquo;Additional Resources&amp;rdquo; tab you would need to copy in your choice xml (&lt;a href=&#34;https://gist.github.com/clburlison/8fd09ae20de4279281f4/archive/89a8735ac42fd634389e89f0f45c80e8f0e3bf3b.zip&#34; target=&#34;_blank&#34;&gt;download link&lt;/a&gt;). This is Step #6 in Rich&amp;rsquo;s guide.&lt;/p&gt;

&lt;p&gt;Then a modified postinstall script would look like:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/clburlison/8fd09ae20de4279281f4.js?file=postinstall&#34;&gt;&lt;/script&gt;

&lt;p&gt;Make sure and walk through the remaining steps in Rich&amp;rsquo;s guide to complete this process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Using his method is repackaging the installer however he is making no-modifications to the Office installer 😊.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;faq&#34;&gt;FAQ&lt;/h1&gt;

&lt;p&gt;Due to the shear quantity of content I am attempting to cover the remanding section of this post will be in FAQ format.&lt;/p&gt;

&lt;h2 id=&#34;why-is-o2016-so-different-from-o2011&#34;&gt;Why is O2016 so different from O2011?&lt;/h2&gt;

&lt;p&gt;The main reason why Office 2016 is so different is the fact that each application is now &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Security/Conceptual/AppSandboxDesignGuide/AboutAppSandbox/AboutAppSandbox.html&#34; target=&#34;_blank&#34;&gt;Sandboxed&lt;/a&gt;. Due to that fact, Microsoft is now just one step away from releasing Office 2016 apps on the Mac App Store (figuratively speaking at least). Obviously time frame for this move would depend greatly on internal policies, process with Apple, and other factors unknown to me. Sandboxing also means it is easier to remove an Application after it has been installed IE - &lt;code&gt;sudo rm -rf &amp;quot;/Applications/Microsoft Word.app&amp;quot;&lt;/code&gt;. However, one downside of Sandboxed applications is the large quantity of duplicated data (mostly Fonts) being stored on the disk in five applications.&lt;/p&gt;

&lt;p&gt;Bonus regarding the MAS:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To add to the optional statement, one of the reasons why MAU is optional is because we don’t/can’t use it for apps that are delivered through the Mac AppStore. Technically, those apps (such as OneNote) are the same regardless of whether you get them from the Mac AppStore vs. Suite installer. MAU does have some additional logic to look for _MASReceipt in the app bundle so that it doesn’t attempt to update an MS app that came through the Mac AppStore.&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1447219900000887&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;o2016-takes-up-so-much-more-space&#34;&gt;O2016 takes up so much more space.&lt;/h2&gt;

&lt;p&gt;True. This is due to Sandboxing. This is a limitation is due to Apple&amp;rsquo;s guidelines on how Sandboxing is implemented.&lt;/p&gt;

&lt;p&gt;Nothing can be done about the increased size at this point in time.&lt;/p&gt;

&lt;p&gt;Now is a good time to mention &lt;a href=&#34;https://github.com/goodbest/OfficeThinner&#34; target=&#34;_blank&#34;&gt;OfficeThinner&lt;/a&gt; is bad, will break code signing, and is &lt;strong&gt;not&lt;/strong&gt; supported. If you did this on a personal machine you should revert the changes sooner rather than later (easiest fix is to install latest SKU-less installer).&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-manage-updates-for-office-2016&#34;&gt;How do I manage updates for Office 2016?&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;re limited to two solutions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use MAU&lt;/li&gt;
&lt;li&gt;Manually apply the updates with management system (munki, casper, etc.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Technically speaking if you aren&amp;rsquo;t using MAU, you really need to look into &lt;a href=&#34;#autopkg&#34;&gt;AutoPkg&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;autopkg&#34;&gt;AutoPkg&lt;/h2&gt;

&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;p&gt;&lt;b&gt;Unsupported!&lt;/b&gt;
&lt;p&gt;If you wish to utilize AutoPkg to install the individual applications IE - &lt;code&gt;MSWord2016.{download,install,munki,jss,etc.}&lt;/code&gt;, &lt;code&gt;MSExcel2016.{etc}&lt;/code&gt;, &lt;code&gt;MSPowerPoint2016.{etc}&lt;/code&gt;. &lt;code&gt;MSOutlook2016.{etc}&lt;/code&gt; or &lt;code&gt;MSOneNote2016.{etc}&lt;/code&gt;, on &lt;b&gt;&lt;u&gt;NEW&lt;/u&gt;&lt;/b&gt; machines this is unsupported by Microsoft. These recipes correlate to the &amp;lsquo;Combo&amp;rsquo; update packages (by default) and are not suitable for first time installation. The delta updates are also not suitable for first time installation.
&lt;br&gt;&lt;br&gt;
  This means your base installation should be one of the &lt;a href=&#34;#how-do-i-install-o2016&#34;&gt;supported options&lt;/a&gt; above. Afterwards you can utilize AutoPkg to download the combo updates in place of MAU.
&lt;br&gt;&lt;br&gt;
  This is a common practice in the community that needs to stop. If you did this in the past to get Office 2016 on your computers simply changing to one of the supported solutions above will get your computers in compliance. I am unable to say for sure but it is very possible that if you did install using this unsupported method the 15.20 update in March might break your installation (purely a guess).&lt;/p&gt;&lt;/p&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;As MAU is the recommended solution for updates, it was important to make that flow as seamless as possible. When you run custom install/update solutions you need to take care of those things yourself.&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1452617616007496&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Normally quotes go at the end however that one was important. Go ahead read it again. So AutoPkg users: the importance of that statement is you need to make sure MS applications are closed when installing updates. For munki users this means incorporating &lt;code&gt;blocking_applications&lt;/code&gt; arrays in your pkginfos. When installing &amp;ldquo;update&amp;rdquo; packages (delta or combo) you only need to force one application to be closed per update package. However, if you wish to utilize the &amp;ldquo;SKU-less Installer&amp;rdquo; package for both fresh machine installs and updates your &lt;code&gt;blocking_applications&lt;/code&gt; will need to make sure all five applications plus MAU are closed (the example I listed in the &lt;a href=&#34;#munki&#34;&gt;munki&lt;/a&gt; section covers this).&lt;/p&gt;

&lt;p&gt;EX 1 - Update Packages:&lt;/p&gt;

&lt;p&gt;This applies to the &amp;lsquo;Delta&amp;rsquo; and &amp;lsquo;Combo&amp;rsquo; updates and the &amp;lsquo;Standalone Installer&amp;rsquo; packages. If you wish to deploy one of the &amp;ldquo;updates&amp;rdquo; your end-users will only need to close the application(s) that are being updated. Each update package correlates to one application on the file system. IE - Jane has Outlook open but the other O2016 applications closed. If your management solution supports unattended installs Word, PowerPoint, Excel, &amp;amp; OneNote could all be updated without bothering Jane. However, when it comes time to install Outlook she will need to close the application in order for the installation to properly complete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The standalone installer packages currently do not have an AutoPkg recipe. Nor do I personally feel a need for them.&lt;/p&gt;

&lt;p&gt;EX 2 - SKU-less Installer:&lt;/p&gt;

&lt;p&gt;If you go this route new machines will only ever need to install one package to get the latest Office 2016 (two packages if you count the VL Serializer). The down side to this solution is all five apps (Word, Excel, OneNote, PowerPoint, &amp;amp; Outlook plus MAU) will need to be closed prior to starting an update. Due to file size this package will take longer to download from your management system to the client computer, and will take longer to install compared to the update packages.&lt;/p&gt;

&lt;p&gt;If you aren&amp;rsquo;t in the autopkg loop you&amp;rsquo;ll want to add the main recipe repo (combo &amp;amp; delta update packages) and Allister repo (SKU-less &amp;amp; MAU installer packages).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
autopkg repo-add https://github.com/autopkg/recipes
autopkg repo-add https://github.com/autopkg/arubdesu-recipes

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using AutoPkg is outside of the scope of this guide.&lt;/p&gt;

&lt;h2 id=&#34;http-macadmins-software&#34;&gt;&lt;a href=&#34;http://macadmins.software&#34; target=&#34;_blank&#34;&gt;http://macadmins.software&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is a site that is &lt;em&gt;not&lt;/em&gt; affiliated with Microsoft but ran by a friendly face (&lt;em&gt;cough&lt;/em&gt; pbowden &lt;em&gt;cough&lt;/em&gt;). This website is simple and has one purpose: get current software links/version easier. With that said all of the links are actually redirects to Microsoft&amp;rsquo;s Official CDN so software downloaded from this site is safe. The packages can be verified as they are all signed by Microsoft&amp;rsquo;s developer certs.&lt;/p&gt;

&lt;h2 id=&#34;when-saving-i-get-a-blank-directory&#34;&gt;When saving I get a blank directory!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2016-01-14/saving_online_default.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;By default the Office 2016 suite of applications have &amp;lsquo;Online Locations&amp;rsquo; selected in the save window. This might be considered confusing to end-users. In addition some environments are not allowed to save files to cloud based storage locations. This is now manageable with a preference, example below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is a user-level setting. This can be ran with &lt;a href=&#34;https://github.com/chilcote/outset&#34; target=&#34;_blank&#34;&gt;outset&lt;/a&gt; or some other scripting solution.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ defaults write $HOME/Library/Group\ Containers/UBF8T346G9.Office/com.microsoft.officeprefs.plist DefaultsToLocalOpenSave -bool TRUE

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is not a perfect solution however if you really need to change the default save location we have a solution!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And one more from me for &lt;strong&gt;15.18&lt;/strong&gt;, you can now set the following plist preference to force the open/save panel to ‘On my Mac’ instead of &amp;lsquo;Online Locations&amp;rsquo; &amp;ndash; [preference above]. I know it’s a little long, but it’s a single place that will affect the behavior of Word, Excel and PowerPoint 2016.&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1450417854005113&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;set-the-user-information&#34;&gt;Set the User Information&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2016-01-14/MeContact.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This was found by &lt;a href=&#34;http://maclovin.org/blog-native/2015/office-2016-where-is-the-name-of-the-user-stored-&#34; target=&#34;_blank&#34;&gt;François Levaux&lt;/a&gt; so I take no credit for the discovery however to make it more readily accessable I will be posting this here. If you wish to automatically populate the User Information fields (Name and Initials) the following script can do so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is another user level script and &lt;strong&gt;must&lt;/strong&gt; be ran as the logged in user. Running under any instance of root (IE - sudo, or LaunchDaemon) will result in unfavorable results.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/clburlison/4552c1036236a22ba829.js?file=Office2016-MeContact.sh&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;can-t-i-just-copy-com-microsoft-office-licensingv2-plist&#34;&gt;Can&amp;rsquo;t I just copy com.microsoft.office.licensingV2.plist?&lt;/h2&gt;

&lt;p&gt;No. This was a bug. Microsoft is aware of the issue and this will be fixed in 15.20 which is scheduled to be released in March.&lt;/p&gt;

&lt;p&gt;The first editions of the Volume License installer from Microsoft caused issues with licensing. The Mac Admin Community collectively came to the solution of packaging &lt;code&gt;/Library/Preferences/com.microsoft.office.licensingV2.plist&lt;/code&gt; separately and applying this file to new installations. This was wrong. Do not do it.&lt;/p&gt;

&lt;p&gt;If you did copy the &lt;code&gt;com.microsoft.office.licensingV2.plist&lt;/code&gt; file see &lt;a href=&#34;#vl-serializer&#34;&gt;VL Serializer&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;@reidblondell: bottom line is that if you&amp;rsquo;re copying com.microsoft.office.licensingv2.plist between machines then you are not in a supportable state. The only supportable solution is to have that plist file generated on the machine you intend to use by the Microsoft Office Setup Assistant (MOSA). Up to you how you package this, but MOSA needs to be run&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1447525532000461&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;dialog-prompt-s-ie-what-s-new&#34;&gt;Dialog Prompt(s) - IE What&amp;rsquo;s New&lt;/h2&gt;

&lt;p&gt;Eric Holtam has a great post regarding these dialog prompts and managing them with profiles &lt;a href=&#34;https://osxbytes.wordpress.com/2015/09/17/not-much-whats-new-with-you/&#34; target=&#34;_blank&#34;&gt;located here&lt;/a&gt;. The only part that I didn&amp;rsquo;t understand, initially, was Office is actually providing your with two separate &amp;ldquo;What&amp;rsquo;s New&amp;rdquo; dialog boxes. The first (shown below with Excel) gives you a splash screen and then prompts you to select your colour theme: Classic or Colorful. Along with prompting O365 users to sign-in for activation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2016-01-14/WhatsNew1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The second &amp;ldquo;What&amp;rsquo;s New&amp;rdquo; dialog prompt will only be shown for O365 users. With 15.15 and up VL customers will not see these prompts. It does not matter how you installed O2016, even the SKU-less installer, if you are a VL customer these dialog prompts will not be shown.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2016-01-14/WhatsNew2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Both of these dialog boxes can be disabled, however if you are a O365 customer disabling the first dialog prompt is not recommended (see quote from Eric below).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re an O365 customer and you suppress the 1507 key your users won&amp;rsquo;t be prompted to authorize the license on first launch.  You&amp;rsquo;ll have to do that from in-app and the dialog that appears makes it sound like it needs to be purchased.  There&amp;rsquo;s a small link to click to specify you already have a license.&lt;/p&gt;

&lt;p&gt;@eholtam &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1452712063008493&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;delta-updates&#34;&gt;Delta Updates&lt;/h2&gt;

&lt;p&gt;With the release of 15.18 Microsoft has released Delta updates. Paul has released a public document that goes over these updates in quite a bit of detail (see below). The biggest note for these delta updates is that they will only work on the current release minus one minor revision (N-1).&lt;/p&gt;

&lt;p&gt;IE - I have Office 15.17 installed when 15.18 was released MAU offered to install the latest 15.18 updates as delta packages. However, if I was on 15.16 I would need the 15.18 combo update packages (quite a bit larger in file size) in order to update to the latest release.&lt;/p&gt;

&lt;p&gt;The nice part about these Delta updates is if you are using MAU these are automatically offered to your users without any intervention on your part.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://clburlison.com/images/2016-01-14/Delta_Updates.pdf&#34;&gt;&lt;img src=&#34;https://clburlison.com/images/pdf-200x200.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If anyone wants to try out delta updates (we’ve now got them down to 350 MB for the entire suite), just change MAU to the Internal channel&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1452622212007576&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;vl-serializer&#34;&gt;VL Serializer&lt;/h2&gt;

&lt;p&gt;Again, Paul has released a document that will cover more information than I can. The only thing I want to highlight is if you are coming from a known bad install of office (IE - you copied com.microsoft.office.licensingV2.plist) you need to run a &lt;code&gt;rm -f /Library/Preferences/com.microsoft.office.licensingV2.plist&lt;/code&gt; prior to running the VL Serializer package.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://clburlison.com/images/2016-01-14/VL_Serializer.pdf&#34;&gt;&lt;img src=&#34;https://clburlison.com/images/pdf-200x200.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;office-insider&#34;&gt;Office Insider&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The   Office  Insider program is  a   new initiative  to  provide Office  customers   on  all platforms   to  get early   access  to  the very    latest  builds  of  the
product.    The public  description can be  found   at  &lt;a href=&#34;https://products.office.com/office-insider&#34; target=&#34;_blank&#34;&gt;https://products.office.com/office-insider&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://clburlison.com/images/2016-01-14/Office_Insider.pdf&#34;&gt;&lt;img src=&#34;https://clburlison.com/images/pdf-200x200.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;mau&#34;&gt;MAU&lt;/h1&gt;

&lt;p&gt;Sorry, MAU is a very complex topic. I do not plan on utilizing it in my environment so below are important notes from Paul.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning …long paragraph coming up  😉&lt;/p&gt;

&lt;p&gt;Here’s a new feature that I implemented in MAU 3.3 which got released alongside 15.17 yesterday. I was talking to an enterprise customer a couple of months ago, and they had a semi-managed environment where they ‘slow’ pushed updates to Office 2016, but they also wanted to allow users to use MAU and get updates. Problem is that they wanted to control the ‘maximum’ version that MAU would see. For example, even though 15.17 got recently released, they didn’t want users to update to it until IT had a chance to validate it and make sure it didn’t break anything. However, they were happy for users to upgrade to 15.16 even though they hadn’t pushed it out to everyone.&lt;/p&gt;

&lt;p&gt;So, while I was implementing the new ‘channels’ feature in MAU, I allow a ‘Custom’ channel to be set. You can then point MAU at your own HTTPS server that has a copy of the manifests you want to use, instead of the latest ones at &lt;a href=&#34;https://www.microsoft.com/mac/autoupdate&#34; target=&#34;_blank&#34;&gt;https://www.microsoft.com/mac/autoupdate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The manifests are named as follows, and these are the files you’ll want to copy to your own web server:
Word 2016 for Mac - &lt;code&gt;0409MSWD15.xml&lt;/code&gt; &amp;amp; &lt;code&gt;0409MSWD15.cat&lt;/code&gt;
Excel 2016 for Mac - &lt;code&gt;0409XCEL15.xml&lt;/code&gt; &amp;amp; &lt;code&gt;0409XCEL15.cat&lt;/code&gt;
PowerPoint 2016 for Mac - &lt;code&gt;0409PPT315.xml&lt;/code&gt; &amp;amp; &lt;code&gt;0409PPT315.cat&lt;/code&gt;
Outlook 2016 for Mac - &lt;code&gt;0409OPIM15.xml&lt;/code&gt; &amp;amp; &lt;code&gt;0409OPIM15.cat&lt;/code&gt;
OneNote 2016 for Mac - &lt;code&gt;0409ONMC15.xml&lt;/code&gt; &amp;amp; &lt;code&gt;0409ONMC15.cat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As MAU is version agnostic, you can also use this same mechanism to control Office 2011 and Lync updates.
Now, MAU verifies the hash across the CAT and XML, so you can’t tamper with the XML, or try to use your own server for PKGs, but you can at least prevent MAU from ‘seeing’ versions that you don’t support.&lt;/p&gt;

&lt;p&gt;The MAU configuration for this is as follows:
&lt;code&gt;defaults write com.microsoft.autoupdate2 ChannelName -string &#39;Custom&#39;&lt;/code&gt;
&lt;code&gt;defaults write com.microsoft.autoupdate2 ManifestServer -string &#39;https://yourwebserver/yourpath/&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NOTE: That MAU 3.3 will only work with HTTPS servers. In MAU 3.4 which is coming next month, I’ve relaxed this so you can also use HTTP.
Let me know if you have any questions or comments! When we get closer to end of this month, I’ll talk more about how channels work in MAU 3.4 and how to take advantage of them(edited)&lt;/p&gt;

&lt;p&gt;Also note that it’s important to remember the trailing &lt;code&gt;/&lt;/code&gt; at the end of the ManifestServer path value&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1449904185003906&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;mau-3-4-update&#34;&gt;MAU 3.4 update&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2016-01-14/insider_builds.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lots of good progress today towards our 15.18 January release that I wanted to share. First up, MAU 3.4 which is scheduled to release on &amp;frac14;. The big change here is support for the new Office Insiders program, and the official release of multiple update channels.&lt;/p&gt;

&lt;p&gt;There’s a new checkbox in the UI which you can see in the screenshot below. If you check this box, it sets the underlying ChannelName key to ‘External’ which means you’ll get new builds roughly 7 days before the rest of the world. Not exposed through the UI, but if you’re feeling super keen, you can manually set the ChannelName key to ‘Internal’ (&lt;code&gt;defaults write com.microsoft.autoupdate2 ChannelName -string &#39;Internal&#39;&lt;/code&gt;) and get new builds roughly 14 days before the rest of the world. It goes without saying that release quality improves as we head toward worldwide release. However, this mechanism of getting early builds means that all of you can enjoy early access and new feature testing without needing special FTP creds - all the PKGs for all channels will be published on our public Office CDN. For those of you who don’t want users opting in to early builds, I’ve added a pref to disable the checkbox (&lt;code&gt;defaults write com.microsoft.autoupdate2 DisableInsiderCheckbox -bool TRUE&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Mainly for @allister, the channel names map to the following URLs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Internal == &lt;a href=&#34;https://www.microsoft.com/mac/Internal&#34; target=&#34;_blank&#34;&gt;https://www.microsoft.com/mac/Internal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;External == &lt;a href=&#34;https://www.microsoft.com/mac/External&#34; target=&#34;_blank&#34;&gt;https://www.microsoft.com/mac/External&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/files/pbowden/F0GUKFW4C/pasted_image_at_2015_12_17_09_36_pm.png&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;can-i-disable-mau-from-auto-checking-for-updates&#34;&gt;Can I disable MAU from auto-checking for updates?&lt;/h2&gt;

&lt;p&gt;Sure. This process is the same as it was with Office 2011. My recommended method for making this change is with a profile. Example from Greg Neagle: &lt;a href=&#34;https://github.com/gregneagle/profiles/blob/master/autoupdate_disablers/disable_autoupdates_microsoftautoupdater.mobileconfig&#34; target=&#34;_blank&#34;&gt;disable_autoupdates_microsoftautoupdater.mobileconfig&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The change can also be applied per user with defaults:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ defaults write com.microsoft.autoupdate2 HowToCheck -string &#39;Manual&#39;
$ defaults write com.microsoft.autoupdate2 LastUpdate -date &#39;2001-01-01T00:00:00Z&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;i-don-t-want-to-install-mau-is-that-supported&#34;&gt;I don&amp;rsquo;t want to install MAU, is that supported?&lt;/h2&gt;

&lt;p&gt;Yes, MAU is completely optional. In fact each of the five core MS applications are optional. Just because the installer has all five available does not mean you must install them.&lt;/p&gt;

&lt;p&gt;If you choose to &lt;em&gt;not&lt;/em&gt; install MAU, all updates to the Office suite will be completely on you as the administrator. In my environment MAU is removed when I uninstall Office 2011. During the rollout of Office 2016 I use a choice xml file to disable the installation of MAU from the SKU-less installer.&lt;/p&gt;

&lt;p&gt;In the example below:&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;attributeSetting&lt;/code&gt; setting for &lt;code&gt;com.microsoft.autoupdate&lt;/code&gt; is set to a 0. That is telling the installer to not install MAU. You can modify the example choice xml to customize which applications you do/don&amp;rsquo;t want installed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 - install&lt;/li&gt;
&lt;li&gt;0 - don&amp;rsquo;t install&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/clburlison/8fd09ae20de4279281f4.js?file=office2016.xml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Lastly, once you make these changes you can install from the command line like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ /usr/sbin/installer -applyChoiceChangesXML /path/to/office2016.xml \
-pkg /path/to/Microsoft_Office_2016_Installer.pkg \
-target /

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are interested in how I created the choice xml above please see the following links: &lt;a href=&#34;https://jamfnation.jamfsoftware.com/discussion.html?id=13946#responseChild84049&#34; target=&#34;_blank&#34;&gt;Office 2011 Choices Explained&lt;/a&gt;, &amp;amp; &lt;a href=&#34;https://github.com/munki/munki/wiki/ChoiceChangesXML&#34; target=&#34;_blank&#34;&gt;Munki Wiki ChoiceChangeXML&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Okay, makes sense - thanks for the clarification. MAU is designed to be independent from the apps, so it is considered ​*optional*​ ….you’re fully supported if you want to omit it from your installs. However, the same is not true for the licensing and fonts/frameworks/proofing tools packages - those are required&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1447219794000886&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Following section:&lt;/strong&gt; I debated adding the following section or not. The TL;DR is make sure you are using release 15.17.0 or greater. If you want more details then carry on.
{: .notice}&lt;/p&gt;

&lt;h1 id=&#34;bugs&#34;&gt;Bugs&lt;/h1&gt;

&lt;p&gt;Oh the bugs that have been squashed. This is not an all encompassing list however &amp;ldquo;big issues&amp;rdquo; should be listed below.&lt;/p&gt;

&lt;h1 id=&#34;15-17-release-log-for-admins&#34;&gt;15.17 Release Log for Admins&lt;/h1&gt;

&lt;p&gt;Included in 15.17 mid-December Release (i.e. work already complete and verified)*​&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Support for ARD installs, and other solutions like Casper, Munki (as verified by your good selves)&lt;/li&gt;
&lt;li&gt;New package in VL ISO called �Microsoft_Office_2016_VL_Serializer.pkg� which you can use to generate a bona fide licensingv2.plist file on top of a SKU-less install&lt;/li&gt;
&lt;li&gt;Installer GUI now supports selecting which volume to install on&lt;/li&gt;
&lt;li&gt;Installer GUI now supports selecting which app packages to install (including MAU)&lt;/li&gt;
&lt;li&gt;MAU Daemon pop-up now suppressed for unattended installs&lt;/li&gt;
&lt;li&gt;Word is no longer auto-launched at the end of the GUI install&lt;/li&gt;
&lt;li&gt;OneNote Sign-in button now works&lt;/li&gt;
&lt;li&gt;New plist preference to control whether Error Reporting shows the �send additional files� dialog. Will never send additional files or prompt the user if set&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1448495549001887&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;keychain-prompt&#34;&gt;Keychain Prompt&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2016-01-14/bad_mau_daemon.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;FIXED - 15.17&lt;/p&gt;

&lt;p&gt;Issue - MAU (Microsoft Auto Update app) has a background process that would run to see if updates are available. This process would prompt end users for permission to access the keychain which resulted in the picture above. Many end-users had no idea what or why this prompt was being displayed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Next up, those pesky keychain access errors on first app launch are now a thing of the past. Most of you on VL probably don’t see these, but O365 users see them a lot. I’ve changed the code so that the Office 2016 apps are automatically provisioned with access on keychain creation.&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1450417340005109&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More on the actual fix to this issue. Inside of &lt;code&gt;$HOME/Library/Preferences/com.microsoft.autoupdate2.plist&lt;/code&gt; the following key value is created during a GUI installation:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In case it isn&amp;rsquo;t clear &lt;em&gt;you&lt;/em&gt; as the admin should &lt;strong&gt;NOT&lt;/strong&gt; be creating or modifying this setting. That is the responsibility of Microsoft and the installer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;
&amp;lt;key&amp;gt;StartDaemonOnAppLaunch&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Yep, that’s a new key in MAU 3.3 and 15.17 - it’s how I implemented the fix for the MAU daemon issue. Basically, if this pref exists and set to 1, then the MAU daemon attempts to launch on app boot. The pref is written by the MAU postinstall script for a GUI install, so it won’t exist for unattended installs&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1449899823003896&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;software-not-actually-becoming-licensed&#34;&gt;Software not actually becoming licensed&lt;/h2&gt;

&lt;p&gt;FIXED - 15.14&lt;/p&gt;

&lt;p&gt;Issue - If the VL intall package was installed at the loginwindow, Office 2016 would fail to properly serialize O2016.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;@chrfr no, you won’t break if you manually extracted the VL serializer from 15.14 and run it with a 15.17 install. It’s just that there’s a bug with that VL serializer where it won’t run properly if the user is not logged on. That’s fixed in the 15.17 VL serializer.&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1449897132003874&#34; target=&#34;_blank&#34;&gt;source link #5&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;outlook-resizing-word-crashing-bugs&#34;&gt;Outlook Resizing/Word Crashing Bugs&lt;/h2&gt;

&lt;p&gt;FIXED - 15.17.1&lt;/p&gt;

&lt;p&gt;Issue - A bug that caused issues when resizing Outlook and some bug fixes for Word.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just a heads-up that Outlook and Word 15.17.1 will release this afternoon. Outlook has a fix for the resizing issue (thanks to everyone that tested the build from yesterday). Word has some targeted fixes for some crashing issues we’ve seen with custom keyboards and invalid document URLs)&lt;/p&gt;

&lt;p&gt;@pbowden &amp;ndash; &lt;a href=&#34;https://macadmins.slack.com/archives/microsoft-office/p1450377975004954&#34; target=&#34;_blank&#34;&gt;source link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h1&gt;

&lt;p&gt;Hopefully that covers all the bits and pieces a Mac Administrator would want to know.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Links:&lt;br /&gt;
&lt;a href=&#34;https://macops.ca/whats-wrong-with-the-office-2016-volume-license-installer/&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s Wrong with Office 2016 VL Installer&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://macops.ca/the-office-for-mac-2016-volume-license-installer-two-months-later/&#34; target=&#34;_blank&#34;&gt;VL Installer two months later&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;http://www.richard-purves.com/?p=79&#34; target=&#34;_blank&#34;&gt;Office 2016 Packaging&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://jamfnation.jamfsoftware.com/discussion.html?id=16761&#34; target=&#34;_blank&#34;&gt;Office 2016 Volume Installer findings&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://jamfnation.jamfsoftware.com/discussion.html?id=17013&#34; target=&#34;_blank&#34;&gt;JAMF Nation - Suppress this Dialog&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://osxbytes.wordpress.com/2015/09/17/not-much-whats-new-with-you/&#34; target=&#34;_blank&#34;&gt;Not much what&amp;rsquo;s new with you&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://osxbytes.wordpress.com/2015/09/23/office-2016-mac-admin-resource-links/&#34; target=&#34;_blank&#34;&gt;Office 2016 Mac Admin Resource Links&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://support.office.com/en-us/article/What-s-New-and-Improved-in-Office-2016-for-Mac-for-Office-365-44d5a464-3051-41b0-b44e-c6cee569f545&#34; target=&#34;_blank&#34;&gt;What&amp;rsquo;s New and Improved in Office 2016 for Mac for Office 365&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://derflounder.wordpress.com/2016/01/14/creating-an-office-2016-15-18-0-installer/&#34; target=&#34;_blank&#34;&gt;Creating an Office 2016 Installer&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://jamfnation.jamfsoftware.com/discussion.html?id=13946#responseChild84049&#34; target=&#34;_blank&#34;&gt;Office 2011 Choices Explained&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;http://maclovin.org/blog-native/2015/office-2016-where-is-the-name-of-the-user-stored-&#34; target=&#34;_blank&#34;&gt;Office 2016 where is the name of the user stored&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://github.com/munki/munki/wiki/ChoiceChangesXML&#34; target=&#34;_blank&#34;&gt;Munki Wiki ChoiceChangeXML&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sign Packages with Luggage</title>
      <link>https://clburlison.com/sign-packages-with-luggage/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/sign-packages-with-luggage/</guid>
      <description>

&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Are you an Apple Developer? Most of the Apple Admin Community have developer accounts for the simple reason of gaining access to beta releases earlier than the public. This extra times allows us to test for changes that might affect the environments we support before it ends up in the hands of our users. Up until this point that is the only reason I could justify having a Dev account. Recently I found out that being a developer gives you the access to sign packages using a secure certificate from Apple, which I will document below.&lt;/p&gt;

&lt;p&gt;As of October 24th, commit &lt;a href=&#34;https://github.com/unixorn/luggage/commit/4d270a0dbc5f31bebbf9672d4a2970ad6316c8b4&#34; target=&#34;_blank&#34;&gt;4d270a0&lt;/a&gt; of the Luggage project, packagemaker is no longer a requirement!! A pretty big deal since packagemaker has not seen an update since the late days of Snow Leopard. This update to Luggage, makes use of Apple&amp;rsquo;s built-in pkgutil command to build native OS X packages. For quite some time you could force Luggage to use pkgutil but this required adding &lt;code&gt;PKGBUILD=1&lt;/code&gt; to the top of every Makefile.&lt;/p&gt;

&lt;p&gt;Luggage allows us to create packages that meet the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;repeatability&lt;/li&gt;
&lt;li&gt;mobile&lt;/li&gt;
&lt;li&gt;sharable&lt;/li&gt;
&lt;li&gt;easy incremental versioning&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;the-setup&#34;&gt;The Setup&lt;/h1&gt;

&lt;p&gt;The above is fantastic news and it lays the groundwork for Luggage to sign packages. Honestly, pkgutil is doing all of the hardwork behind the scene but I found documentation on using Luggage to sign packages spread all over. The goal below is to document the process of signing a package from start to finish.&lt;/p&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Apple recommends requesting a certificate via Xcode and while it is quite possible, and much easier, I found that the certificate generated via Xcode is only valid for 365 days. Doing it the manual method below creates a certificate valid for five (5) years.&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;obtaining-the-certificate&#34;&gt;Obtaining the certificate&lt;/h2&gt;

&lt;p&gt;Visit the &lt;a href=&#34;https://developer.apple.com&#34; target=&#34;_blank&#34;&gt;Apple Developer page&lt;/a&gt; and login via the Member Center link (top right).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click the on the certificates section.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/0-certiicates.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click on the Mac certificate section.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/0-mac-certs.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a new certificate from the plus (+) button.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/0-new-cert.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a new Developer ID.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/1-create-dev-id.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create an &amp;ldquo;installer&amp;rdquo; certificate to use with Luggage.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/2-dev-installer.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The steps on this page explain how to create a certificate signing request (csr). I will detail the steps in following images. For now just open &amp;ldquo;Keychain Access&amp;rdquo;.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/3-create-csr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keychain Access &amp;gt; Certificate Assistant &amp;gt; Request a Certificate from a Certificate Authority&amp;hellip;
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/4-keychain-csr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fill in the Email address and Common Name.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;alert alert-danger&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Do not fill in the CA Email per Apple&amp;rsquo;s instructions.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2014-11-13/5-creating-the-csr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After the CSR is created upload to Apple&amp;rsquo;s website.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/6-upload-csr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate the certificate.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/7-generate-cert.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download your newly created certificate.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/8-dl-cert.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Double click your cert to install into your keychain. (I choice to install to my login keychain)&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/9-install-cert.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For reference my certificate looks like the below.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/10-sample-cert.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-a-signed-package&#34;&gt;Create a signed package&lt;/h2&gt;

&lt;p&gt;Great we have a newly created certificate ready for us to use. Now we need to sign a package and what better package to sign then luggage itself.&lt;/p&gt;

&lt;p&gt;If you already have the Luggage downloaded simply change directory into the project directory. Else download it with git using the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/unixorn/luggage.git /your/luggage/path
cd /your/luggage/path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If by some chance you have made it this far without actually installing luggage run the following&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make bootstrap_files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets make a non-signed package with luggage, that installs luggage (meta enough for ya), run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rename the package to &lt;code&gt;luggage-no-sign.pkg&lt;/code&gt;. We are doing this for comparisons later.&lt;/p&gt;

&lt;p&gt;To tell luggage to sign the package you need to add the following line of code inside of the Makefile at the beginning. Make sure to change the information in the double quotes with the name of your certificate (review image 11 above).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PB_EXTRA_ARGS+= --sign &amp;quot;Developer ID Installer: Clayton Burlison&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are lost on where to add the code in the Makefile see the sample below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;----------------
#
# Sample package that packages luggage.make and prototype.plist

include luggage.make
PB_EXTRA_ARGS+= --sign &amp;quot;Developer ID Installer: Clayton Burlison&amp;quot;

TITLE=luggage
REVERSE_DOMAIN=net.apesseekingknowledge
PAYLOAD=pack-luggage.make pack-prototype.plist \
	pack-usr-local-bin-app2luggage.rb

help::
	@-echo
	@-echo &amp;quot;Installation&amp;quot;
	@-echo
	@-echo &amp;quot;To copy luggage&#39;s files to /usr/local/share/luggage: make bootstrap_files&amp;quot;
----------------&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, lets create the signed package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your login.keychain is locked or you decided to put your cert keys in a separate keychain you will see the following pop-up below. Simply type the password associated with that keychain to allow pkgutil to sign the package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2014-11-13/12-access-to-keychain.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Notice below the visual lock on the signed package. This package will be trusted with Gatekeeper using the default settings.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/13-sign-vs-nonsign.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you click on the lock while in the installer window you can get details about the certificate used to sign a package.
&lt;img src=&#34;https://clburlison.com/images/2014-11-13/14-verify-sign-package-cert.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;pkgbuild-vs-packagemaker&#34;&gt;Pkgbuild vs PackageMaker&lt;/h2&gt;

&lt;p&gt;If you have any Makefiles using &lt;code&gt;postflight&lt;/code&gt; scripts they will need to change the script type to &lt;code&gt;postinstall&lt;/code&gt;. This is a requirement from using pkgutil.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Signing packages might seem like a great idea. Lets sign all the packages&amp;hellip;.but wait. Think of the reasons you are doing it first. It might make sense to &lt;strong&gt;not&lt;/strong&gt; sign packages. For example, if you are creating packages that are only ever going to be ran in Munki, it is not a requirement for that package to be signed. If your certificate expires, you will need to recreate a new package. If however you want to distribute packages to you end-users via the internet it might be company policy or best practice to sign packages. Just wanted to give warnings.&lt;/p&gt;

&lt;h3 id=&#34;random-note&#34;&gt;Random Note&lt;/h3&gt;

&lt;p&gt;In the update to 10.9.5 - Gatekeeper was re-enabled. Seems Apple is really wanting to beef up their security game.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles:&lt;br /&gt;
&lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!topic/the-luggage/9WeNMBcvKjA&#34; target=&#34;_blank&#34;&gt;Productsign&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://github.com/unixorn/luggage&#34; target=&#34;_blank&#34;&gt;Luggage&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!topic/the-luggage/aCU9nNsMUaE&#34; target=&#34;_blank&#34;&gt;Pkgbuild vs PackageMaker&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preview files from terminal</title>
      <link>https://clburlison.com/preview-files-from-terminal/</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/preview-files-from-terminal/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;QuickLook scans file contents before you open those files. Usually this just lets you view a file quickly. But you can also use this same technology from the command line to bring about a change to the Finder without actually opening a file. To access QuickLook from the command line, use qlmanage.&lt;/p&gt;

&lt;p&gt;qlmanage -p ~/Desktop/MyTowel42.pdf&lt;/p&gt;

&lt;p&gt;&amp;mdash;Charles Edge&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;I highly recommend adding an alias to your either your .bashrc or .bash_profile. This will make accessing the command faster, plus you have the added benefit of not seeing all the debug information in your current terminal session.&lt;/p&gt;

&lt;p&gt;Below is the command I use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ql () { qlmanage -p &amp;quot;$*&amp;quot; &amp;gt;&amp;amp; /dev/null; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can preview a file from Terminal by using &lt;code&gt;ql&lt;/code&gt; plus the path to a file.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash if then cheat sheet</title>
      <link>https://clburlison.com/bash-if-then-cheat-sheet/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/bash-if-then-cheat-sheet/</guid>
      <description>

&lt;p&gt;I always find myself looking for a good resource when writing if/then statements in bash scripts. It&amp;rsquo;s hard to remember all the combinations when you simply do not use most of them frequently. Below is my personal cheat sheet&amp;hellip;copied here because I was tired of having to look for a good resource.&lt;/p&gt;

&lt;p&gt;Examples on usage can be found in the &lt;a href=&#34;http://tldp.org/LDP/abs/html/comparison-ops.html&#34; target=&#34;_blank&#34;&gt;original article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;integer-comparison&#34;&gt;integer comparison&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
	# The following are for number values only.
	-eq
		is equal to
		if [ &amp;quot;$a&amp;quot; -eq &amp;quot;$b&amp;quot; ]
	-ne
		is not equal to
		if [ &amp;quot;$a&amp;quot; -ne &amp;quot;$b&amp;quot; ]

	-gt
		is greater than
		if [ &amp;quot;$a&amp;quot; -gt &amp;quot;$b&amp;quot; ]

	-ge
		is greater than or equal to
		if [ &amp;quot;$a&amp;quot; -ge &amp;quot;$b&amp;quot; ]

	-lt
		is less than
		if [ &amp;quot;$a&amp;quot; -lt &amp;quot;$b&amp;quot; ]

	-le
		is less than or equal to
		if [ &amp;quot;$a&amp;quot; -le &amp;quot;$b&amp;quot; ]

	&amp;lt;
		is less than (within double parentheses)
		((&amp;quot;$a&amp;quot; &amp;lt; &amp;quot;$b&amp;quot;))

	&amp;lt;=
		is less than or equal to (within double parentheses)
		((&amp;quot;$a&amp;quot; &amp;lt;= &amp;quot;$b&amp;quot;))

	&amp;gt;
		is greater than (within double parentheses)
		((&amp;quot;$a&amp;quot; &amp;gt; &amp;quot;$b&amp;quot;))

	&amp;gt;=
		is greater than or equal to (within double parentheses)
		((&amp;quot;$a&amp;quot; &amp;gt;= &amp;quot;$b&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;string-comparison&#34;&gt;string comparison&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
	# The following are for strings of data.
	=
		is equal to
		if [ &amp;quot;$a&amp;quot; = &amp;quot;$b&amp;quot; ]

	Caution:
		Note the whitespace framing the =
		if [ &amp;quot;$a&amp;quot;=&amp;quot;$b&amp;quot; ] is not equivalent to the above.

	==
		is equal to
		if [ &amp;quot;$a&amp;quot; == &amp;quot;$b&amp;quot; ]

	This is a synonym for =
	Note:
		The == comparison operator behaves differently
		within a double-brackets test than within single brackets.
		[[ $a == z* ]]   # True if $a starts with an &amp;quot;z&amp;quot; (pattern matching).
		[[ $a == &amp;quot;z*&amp;quot; ]] # True if $a is equal to z* (literal matching).
		[ $a == z* ]     # File globbing and word splitting take place.
		[ &amp;quot;$a&amp;quot; == &amp;quot;z*&amp;quot; ] # True if $a is equal to z* (literal matching).
		# Thanks, Stéphane Chazelas

	!=
		is not equal to
		if [ &amp;quot;$a&amp;quot; != &amp;quot;$b&amp;quot; ]

	This operator uses pattern matching within a [[ ... ]] construct.

	&amp;lt;
		is less than, in ASCII alphabetical order
		if [[ &amp;quot;$a&amp;quot; &amp;lt; &amp;quot;$b&amp;quot; ]]
		if [ &amp;quot;$a&amp;quot; \&amp;lt; &amp;quot;$b&amp;quot; ]

	Note: that the &amp;quot;&amp;lt;&amp;quot; needs to be escaped within a [ ] construct.

	&amp;gt;
		is greater than, in ASCII alphabetical order
		if [[ &amp;quot;$a&amp;quot; &amp;gt; &amp;quot;$b&amp;quot; ]]
		if [ &amp;quot;$a&amp;quot; \&amp;gt; &amp;quot;$b&amp;quot; ]

	Note that the &amp;quot;&amp;gt;&amp;quot; needs to be escaped within a [ ] construct.

	-z
		string is null, that is, has zero length

	String=&#39;&#39;   # Zero-length (&amp;quot;null&amp;quot;) string variable.
		if [ -z &amp;quot;$String&amp;quot; ]
		then
		  echo &amp;quot;\$String is null.&amp;quot;
		else
		  echo &amp;quot;\$String is NOT null.&amp;quot;
		fi     # $String is null.

	-n
		string is not null.

	Caution:
		The -n test requires that the string be quoted within the test brackets.
		Using an unquoted string with ! -z, or even just the unquoted string a
		lone within test brackets (see Example 7-6) normally works, however,
		this is an unsafe practice. Always quote a tested string. [1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;p&gt;To check if a directory exists in a shell script you can use the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ -d &amp;quot;$DIRECTORY&amp;quot; ]; then
  # Control will enter here if $DIRECTORY exists.
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or to check if a directory doesn&amp;rsquo;t exist:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ ! -d &amp;quot;$DIRECTORY&amp;quot; ]; then
  # Control will enter here if $DIRECTORY doesn&#39;t exist.
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;credit&#34;&gt;Credit&lt;/h1&gt;

&lt;p&gt;Special Thanks to the The Linux Documentation Project for outlining the information in such a usable format. They also include great examples on their website.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles:
&lt;a href=&#34;http://tldp.org/LDP/abs/html/comparison-ops.html&#34; target=&#34;_blank&#34;&gt;Advanced Bash-Scripting Guide&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Show Help Desk Information</title>
      <link>https://clburlison.com/show-helpdesk-info/</link>
      <pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/show-helpdesk-info/</guid>
      <description>

&lt;p&gt;Display useful information on your Desktop using Geektool. Make troubleshooting network issues for your end users easier. Find your hostname faster. The amount of useful information is limitless. If you can script it&amp;hellip;you can display it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://clburlison.com/images/2014-07-14/current_info.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;My geektools results.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;hr /&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Firstly, I take no credit for this valuable resource. All credit should go to Erik Gomez from the munki-dev &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!topic/munki-dev/jxs3ljEFbJY&#34; target=&#34;_blank&#34;&gt;mailing list&lt;/a&gt;. All I have done is modified the script to work in my environment. Modifications included removing some excess &lt;code&gt;if&lt;/code&gt;/ &lt;code&gt;then&lt;/code&gt; statements, remove the MAC address, adding current SSID, and a few other tweaks so the script played nicely as a profile. The writing is on the wall, mcx is slowing dying or at least it is becoming a less preferred method of managing preferences.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://clburlison.com/images/2014-07-14/eriks_info.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Erik&amp;#39;s original geektools results.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt; &lt;em&gt;-You will want to download and save these somewhere.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://projects.tynsoe.org/en/geektool/download.php&#34; target=&#34;_blank&#34;&gt;Geektool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/timsutton/mcxToProfile&#34; target=&#34;_blank&#34;&gt;mcxToProfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/timsutton/make-profile-pkg&#34; target=&#34;_blank&#34;&gt;make-profile-pkg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/clburlison/af2a1afe01fb9aff9288&#34; target=&#34;_blank&#34;&gt;Gist files for this project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://clburlison.com/images/2014-07-14/Geektool-login-item.mobileconfig&#34;&gt;Geektool-login-item.mobileconfig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h1&gt;

&lt;p&gt;In short, this is simply a bash script that Geektool is running in the background. It defaults to refreshing every 30 seconds, though you can modify this in the &lt;code&gt;org.tynsoe.geeklet.shell.plist&lt;/code&gt; file, which has negligible performance toll on Mac clients. You want the refresh rate low so when the network drops or you get a new IP address you can easily see changes.&lt;/p&gt;

&lt;h2 id=&#34;the-script&#34;&gt;The Script&lt;/h2&gt;

&lt;script src=&#34;//gist.github.com/clburlison/af2a1afe01fb9aff9288.js?file=geektool_script.sh&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;how-do-you-use-it&#34;&gt;How do you use it?&lt;/h1&gt;

&lt;p&gt;Great now what? Well that script does nothing for you. Unless you want to manually copy and paste on every computer&amp;hellip;for every user profile&amp;hellip;in your entire fleet. So lets automate that process a bit. If you have not done so already you will want to download all five (5) of the requirements above. This includes two command lines tools created by Tim Sutton, Geektool.app, the gist with all the necessary plist files, and a profile to launch Geektool at login.&lt;/p&gt;

&lt;h2 id=&#34;modify-the-script&#34;&gt;Modify the script&lt;/h2&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you wish to use the script as is, feel free to skip below to creating the profiles.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;This will be the most time consuming process so start small. Lets start by changing the Help Desk Phone Number in my script. Open the main plist &lt;code&gt;org.tynsoe.geeklet.shell.plist&lt;/code&gt; from the gist zip file. Scroll down to line 116 and change the following line to something useful.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#### Technology Support
echo &amp;quot;For Help Desk Support call: x3819&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now is a good time to mention that the script inside of the plist has been modified from the original &lt;code&gt;geektool_script.sh&lt;/code&gt; script. The plist file needs to have &lt;code&gt;&amp;amp;&lt;/code&gt; encoded as &lt;code&gt;&amp;amp;amp;&lt;/code&gt;. For that reason if you make to many changes to the script you will need to test for compatibility with GeekTool. Testing will be outside the scope of this post but a hint if you are running into errors: open Geektool manually and paste your script directly into the application.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-profiles&#34;&gt;Creating the profiles&lt;/h2&gt;

&lt;p&gt;Note for this to work, I have found that having two profiles was the easiest solution but your milage may vary. The main reason for splitting the profiles into two, was to use one profile for launching Geektool at login and the second profile deals with organization settings for Geektool: refresh rate, script, color of the text, etc.&lt;/p&gt;

&lt;h3 id=&#34;part-1-login-profile&#34;&gt;Part 1 - Login profile&lt;/h3&gt;

&lt;p&gt;With that out of the way, I will go ahead and say I cheated and created the &lt;code&gt;Geektool-login-item.mobileconfig&lt;/code&gt; with my profile server since it was easier than creating from scratch. You should have downloaded the referenced profile under the requirement section. You can modify this profile to have your organization name by opening the file in a &lt;a href=&#34;http://www.barebones.com/products/textwrangler/&#34; target=&#34;_blank&#34;&gt;text editing&lt;/a&gt; application (aka not TextEdit.app). Search for &amp;ldquo;Birdville ISD&amp;rdquo; and change to your organization name. Save and exit.&lt;/p&gt;

&lt;h3 id=&#34;part-2-organization-profile&#34;&gt;Part 2 - Organization profile&lt;/h3&gt;

&lt;p&gt;Now we are going to use Tim Sutton&amp;rsquo;s mcxToProfile. This tool will combine the three plist files below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.tynsoe.geeklet.shell.plist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.tynsoe.GeekTool.plist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.tynsoe.geektool3.plist&lt;/code&gt; into a single usable profile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put mcxToProfile.py in the same directory as your three plist files. After changing directory to the folder with your files run the following in Terminal:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating your profile&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mcxToProfile.py -r org.tynsoe.geeklet.shell.plist org.tynsoe.GeekTool.plist \
org.tynsoe.geektool3.plist --identifier BISD-GeekTool --displayname=BISD-GeekTool --manage Often
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will want to change your &lt;code&gt;identifier&lt;/code&gt; and &lt;code&gt;displayname&lt;/code&gt; to something useful for your organization.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;This will create a second profile with the name of your &amp;ldquo;identifier + .mobileconfig&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;deploying-your-profiles&#34;&gt;Deploying your Profiles&lt;/h2&gt;

&lt;p&gt;This is kind of the bonus round. If you have made it this far you should have two working profiles (one was already made for you). If you have a MDM server you could simply upload the profiles to that, you could have users double click the files, etc. I however choose to install the profiles via a package for my users.&lt;/p&gt;

&lt;p&gt;Luckily, Tim has made our life easy once again. This time we will use &lt;code&gt;make-profile-pkg&lt;/code&gt; to create a package containing our profiles.  If you are using munki it is even easier, as this tool can even automatically import into your munki repository.&lt;/p&gt;

&lt;p&gt;Making sure your .mobileconfig files and &lt;code&gt;make-profile-pkg.py&lt;/code&gt; are in the same directory. Run the following to create your install package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make_profile_pkg.py --munki-import Geektool-login-item.mobileconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the following, you will need to modify the profile name with your correct file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make_profile_pkg.py --munki-import identifier.mobileconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will want to remove the &lt;code&gt;&amp;ndash;munki-import&lt;/code&gt; flag if you just want to create a package.&lt;/p&gt;

&lt;/div&gt;


&lt;h1 id=&#34;ending-notes&#34;&gt;Ending Notes&lt;/h1&gt;

&lt;p&gt;Hopefully you find this as useful as I did. If you run into any issues feel free to contact me on Twitter or email.&lt;/p&gt;

&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Geektool.app needs to be located in /Applications/.&lt;/li&gt;
&lt;li&gt;A logout/login is required after the profiles are installed for the information to be displayed.&lt;/li&gt;
&lt;li&gt;If one or both of your profiles are removed&amp;hellip;bye bye Desktop Info.&lt;/li&gt;
&lt;li&gt;This script is only good for network interfaces up to 5. If you need more add them in the script.&lt;/li&gt;
&lt;li&gt;Tested with 10.7 Lion through 10.9 Mavericks with success.&lt;/li&gt;
&lt;li&gt;The text is white by default. If your desktop background is a bright color then you will want to change the text color using Geektool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;

&lt;p&gt;Again, a giant thank you to Erik Gomez for sharing with the munki community. Without his original documentation I would have never gotten this to work. Thanks to Tim Sutton for providing awesome tools.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles: &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!topic/munki-dev/jxs3ljEFbJY&#34; target=&#34;_blank&#34;&gt;Using GeekTool to show HelpDesk Information&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bender</title>
      <link>https://clburlison.com/bender/</link>
      <pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/bender/</guid>
      <description>&lt;p&gt;Many administrators use OS X Server. In my opinion the server OS has always lacked choices when it comes to backing up the server services data. Until I found Bender&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2014-07-11/bendericon_display.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bender is a utility written by Forget Computers to automate the backup of OS X Server settings to provide easy restoration of services should they become corrupt, and for importing server settings after a migration or server upgrade.&lt;/p&gt;

&lt;p&gt;Bender Home Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sure you have TimeMachine but some of the postgresql databases have been known to not backup property with TimeMachine. Honestly, I had given up on a backup solution that just gets the data I need for OS X Server. While reading though the &lt;a href=&#34;https://groups.google.com/d/msg/macenterprise/MxLssCqR72Y/J1qFuALErMwJ&#34; target=&#34;_blank&#34;&gt;macenterprise list&lt;/a&gt; I found someone recommended Bender. Once I got to work I realized what a gem I had been missing out on. I have only used Bender on Mavericks (10.9) but it should work on Lion and up. It will daily backup the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An Open Directory archive if the server is running as an Open Directory master.&lt;/li&gt;
&lt;li&gt;A single backup file of all the server settings found in either Server Admin or Server.&lt;/li&gt;
&lt;li&gt;A series of individual backup files of each server setting, so restoration or import of select settings is possible.&lt;/li&gt;
&lt;li&gt;And postgres database used by Profile Manager and Wiki services.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last one was the true winner for me. I had been researching what I needed to do to backup my wiki. Over the past few months the wiki service has become an invaluable documentation tool for me. After finding little to none in the way of Apple documentation/release notes I finally gave up. Bender in combination with TimeMachine makes for a much more complete backup solution for OS X Server.&lt;/p&gt;

&lt;p&gt;Hopefully you find it as invaluable as I did or at least a nice utility to have in your tool-belt.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles: &lt;a href=&#34;http://robotcloud.screenstepslive.com/s/2459/m/5322/l/94467-bender-automated-backup-of-os-x-server-settings&#34; target=&#34;_blank&#34;&gt;Bender Home Page&lt;/a&gt;, &lt;a href=&#34;https://groups.google.com/d/msg/macenterprise/MxLssCqR72Y/J1qFuALErMwJ&#34; target=&#34;_blank&#34;&gt;macenterprise list&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Encrypted DMGs</title>
      <link>https://clburlison.com/encrypted-dmgs/</link>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/encrypted-dmgs/</guid>
      <description>

&lt;p&gt;We all know about file security but how many of our users take the time to properly protect their data? Sure you can make policy but unless someone documents the expectations, reasons, and how to do it, many users will simply ignore policy. How about personal files, we all store data on our computers that we know should be protect but how? Well luckily Apple has a very simple solution to the problem explained above.&lt;/p&gt;

&lt;h2 id=&#34;what-to-secure&#34;&gt;What to secure&lt;/h2&gt;

&lt;p&gt;First, you can secure whatever files your heart desires: bank statements, work files, photos, passwords, etc. Pretty much anything you want, though fair-warning this is not a backup solution and if you forget your encryption password it will make accessing those files quite difficult.&lt;/p&gt;

&lt;p&gt;We secure files to limit access. This will help protect you in case your laptop gets stolen or maybe it just gets physically accessed by someone you know. This method will use a 256-bit AES encryption algorithm to secure your data. That being said if you use a simple password, &lt;em&gt;cough&lt;/em&gt; &lt;code&gt;password&lt;/code&gt; &lt;em&gt;cough&lt;/em&gt;, then it is quite simple for someone to brute force hack that password and have access to your data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: Nothing is 100% secure. This method is just another step that can help make it harder for someone to obtain your information. With enough time the right person could access these files but your average Joe is going to have a darn hard time.&lt;/p&gt;

&lt;h1 id=&#34;creating-an-encrypted-dmg&#34;&gt;Creating an encrypted DMG&lt;/h1&gt;

&lt;p&gt;Step 1 - Open Disk Utility&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-06-17/step1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 2 - Create a Blank Disk Image&amp;hellip;&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-06-17/step2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 3 - Name your new dmg. Note the values shown are important.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name: the mounted disk image name&lt;/li&gt;
&lt;li&gt;Size: depends on your data needs&lt;/li&gt;
&lt;li&gt;Format: the default &lt;code&gt;Mac OS Extended (Journaled)&lt;/code&gt; should be fine for most needs&lt;/li&gt;
&lt;li&gt;Encryption: use 256-bit AES unless you have a solid reason to not&lt;/li&gt;
&lt;li&gt;Partitions: using &lt;code&gt;Single partition - GUID Partition Map&lt;/code&gt; is a standard that is compatible with most Macs&lt;/li&gt;
&lt;li&gt;Image Format: using &lt;code&gt;sparse disk image&lt;/code&gt; will save space on your hard drive and only use the disk space needed by the dmg&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://clburlison.com/images/2014-06-17/step3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 4 - Here you want to type a secure password&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-06-17/step4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 5 - If you click the &lt;code&gt;key icon&lt;/code&gt; OS X will help you create a secure password using the Password Assistant&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-06-17/step5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 6 - Note the file names. This is your encrypted dmg. You can store files here just like a flash drive.&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-06-17/step6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step 7 - If you eject your dmg you will be presented with this pop-up the next time you try to open the dmg. Type your encryption password to unlock the dmg.&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-06-17/step7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;video-showing-the-process&#34;&gt;Video showing the process&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/zAc9H7AQ2TQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Creating an encrypted dmg is quite easy once you know the steps. My preference is to not store the password in your Keychain. If you are logged into your machine another users could walk right up and open the dmg without typing a password.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find My Mac</title>
      <link>https://clburlison.com/find-my-mac/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/find-my-mac/</guid>
      <description>

&lt;p&gt;Under the hood of Find My Mac there are some security details that are not widely published. These details should not concern most consumers however I found them quite interesting.&lt;/p&gt;

&lt;p&gt;When a user enables Find My Mac (FMM) on their computer this is a system level change. This means if a user wishes to enable FMM they must be an administrator of the computer. A result of this is that in most environments where students are standard users this feature should never be enabled by accident. Another action that can be taken to limit FMM on machines under your management is to disable the iCloud prompt when a user logs into the machine for the first time. Look at Rich Trouton&amp;rsquo;s &lt;a href=&#34;https://github.com/rtrouton/rtrouton_scripts/blob/master/rtrouton_scripts/disable_icloud_pop_up/disable_icloud_pop_up.sh&#34; target=&#34;_blank&#34;&gt;script&lt;/a&gt; if you need a solution to do just that.&lt;/p&gt;

&lt;p&gt;Some side affects of enabling FMM means giving access from &lt;a href=&#34;https://www.icloud.com/#find&#34; target=&#34;_blank&#34;&gt;iCloud.com&lt;/a&gt; to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;play a sound on the computer&lt;/li&gt;
&lt;li&gt;lock the computer

&lt;ul&gt;
&lt;li&gt;requiring a four (4) digit passcode&lt;/li&gt;
&lt;li&gt;optionally include a recovery message on the lock screen&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;erase the computer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The web interface&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-05-19/icloud-interface.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Close up of the options&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-05-19/icloud-options.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From my testing, if a computer is offline while one of these options are clicked from iCloud it takes approximately one minute for the signal to be processed on the computer in question (those this could be connectivity related). Playing a sound is by far the fastest option while taking less than one second most of the time when the computer is online. If you choice to lock the computer this will cause your computer will immediately lock up and restart. You will presented with the a screen like the following.&lt;br /&gt;
&lt;img src=&#34;https://clburlison.com/images/2014-05-19/icloud-lock.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Though I did not test, my guess is that an erase will prompt the computer to go into a state like the lock screen while deleting your data. If anyone feels like testing this feel free to contact me with results on twitter.&lt;/p&gt;

&lt;h2 id=&#34;nvram&#34;&gt;NVRAM&lt;/h2&gt;

&lt;p&gt;None of the information above is particularly shocking if you yourself have ever used Find my iPhone or any of the similar Find my device services from Apple. What is interesting is where this data is stored on your computer&amp;hellip;the nvram. This means even if someone removes the hard drive of your computer the information to connect to iCloud is still present. This is great news if your laptop was actually stolen (and connected to the internet) but what does this mean when reassigning a computer that has had FMM enabled? Well the previous user could erase all the information on this laptop at any time in the future. So now I have to check with every user to see if they have had FMM enabled when reassigning a computer? Well, instead of dealing with that huge hassle when it comes around to re-imaging or reassigning a computer you can simply run the following command to clear the nvram of content related to Find my Mac.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disable iCloud from the Command Line&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nvram -d fmm-computer-name  
$ nvram -d fmm-mobileme-token-FMM
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;consumers&#34;&gt;Consumers&lt;/h2&gt;

&lt;p&gt;This means if you ever purchase a second hand Mac from someone you will want to run the same command just for safty. Also, if you are attempting to sell your device be a good consumer and run the command for the next owner.&lt;/p&gt;

&lt;p&gt;If you are not familiar with the command line use the following:&lt;/p&gt;

&lt;h4 id=&#34;resetting-nvram-pram&#34;&gt;Resetting NVRAM / PRAM&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Shut down your Mac.&lt;/li&gt;
&lt;li&gt;Locate the following keys on the keyboard: Command (⌘), Option, P, and R. You will need to hold these keys down simultaneously in step 4.&lt;/li&gt;
&lt;li&gt;Turn on the computer.&lt;/li&gt;
&lt;li&gt;Press and hold the Command-Option-P-R keys before the gray screen appears.&lt;/li&gt;
&lt;li&gt;Hold the keys down until the computer restarts and you hear the startup sound for the second time.&lt;/li&gt;
&lt;li&gt;Release the keys.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Apple ID&amp;rsquo;s are considered personal. Even if you use a work email address these are accounts are not designed to be use by more than ten (10) devices. This is a hard limit set by Apple. Do &lt;em&gt;not&lt;/em&gt; attempt to setup all corporate laptops on one Apple ID it will not work. In fact do not use FMM, it was not designed for this&amp;hellip;look into &lt;a href=&#34;https://meraki.com/login/dashboard_login&#34; target=&#34;_blank&#34;&gt;Meraki&lt;/a&gt; if you need a free solution.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles: &lt;a href=&#34;http://ilostmynotes.blogspot.com/2013/11/disable-find-my-mac-by-modifiying-nvram.html&#34; target=&#34;_blank&#34;&gt;Disable find my Mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;External resources regarding iCloud: &lt;a href=&#34;http://www.apple.com/support/icloud/find-my-device/&#34; target=&#34;_blank&#34;&gt;Apple Find my Device Support&lt;/a&gt;,
&lt;a href=&#34;http://www.cnet.com/how-to/how-to-use-find-my-mac-in-icloud/&#34; target=&#34;_blank&#34;&gt;Cnet&lt;/a&gt;, &lt;a href=&#34;http://www.macworld.com/article/2034795/how-to-track-a-lost-computer-with-find-my-mac.html&#34; target=&#34;_blank&#34;&gt;Macworld&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enable AirDrop on Ethernet</title>
      <link>https://clburlison.com/enable-airdrop-on-ethernet/</link>
      <pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/enable-airdrop-on-ethernet/</guid>
      <description>&lt;p&gt;A quick post over enabling AirDrop to use an ethernet connection along with the default wireless connection.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;AirDrop helps you share items with others nearby&amp;hellip;a quick way to share files wirelessly between two Macs, without having to connect to an existing network.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;a href=&#34;http://support.apple.com/kb/ht4783&#34; target=&#34;_blank&#34;&gt;Apple KB Article&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AirDrop provides a great file-sharing experience and numerous departments at my workplace have grown to love it. The service is good for simple file exchanges without needing to use a files-share. That is until someone in the audio video department tries to send five (5) or more gigabytes of video files to someone sitting right next to him. This starts to cause problems as people experience slow downs and decide to wait instead of using our gigabit ethernet connection.&lt;/p&gt;

&lt;p&gt;Apple provides the ability to use AirDrop over ethernet but did not enable it by default. We can only assume this was for good reason so enabling it could have unknown consequences. I have been using it for well over three (3) months without any issue, but your milage may vary. I will state that after issuing this change I needed to restart both machines for the devices to be able to utilize the AirDrop service (wireless or wired).&lt;/p&gt;

&lt;p&gt;Type the following line of code into Terminal to make the change. Remember this needs to be made on both machines for it to take place.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enable AirDrop Over Any Network Connection&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write com.apple.NetworkBrowser BrowseAllInterfaces 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Disable AirDrop Over Any Network Connection&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write com.apple.NetworkBrowser BrowseAllInterfaces 0
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Article:
&lt;a href=&#34;http://support.apple.com/kb/ht4783&#34; target=&#34;_blank&#34;&gt;Mac Basics: AirDrop&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a puppetmaster on Mavericks</title>
      <link>https://clburlison.com/setting-up-a-puppetmaster-on-mavericks/</link>
      <pubDate>Fri, 04 Apr 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/setting-up-a-puppetmaster-on-mavericks/</guid>
      <description>

&lt;p&gt;For various reasons I decided to set up my puppetmaster on an OS X install of Mavericks instead of what I would consider the norm, being a linux distro. Here are the results. This documentation is strongly based on the article by Nate Walck on afp548.com.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt; I do not use these instructions any longer. The setup of a puppetmaster on OS X Server was just for testing purposes.&lt;/p&gt;

&lt;/div&gt;


&lt;h3 id=&#34;introduction-to-puppet&#34;&gt;Introduction to puppet&lt;/h3&gt;

&lt;p&gt;Puppet is a service that is normally ran in a client/server setup that helps manage and configure devices. Since I am an OS X administrator, this article will be coving the installation and configuration on an OS X platform. While many sysadmins will prefer server installation on a linux distro I simply did not want to mess with getting a Virtual Machine approved in my environment. Below are the steps that I took to set up a puppetmaster on an OS X Mavericks install.&lt;/p&gt;

&lt;h3 id=&#34;pre-steps&#34;&gt;Pre-steps&lt;/h3&gt;

&lt;p&gt;Setting up dns, creating a CNAME record, verifying dns records, etc. Aka all the things I should have done but did not. I will go ahead and mention now that if you are doing this for production taking a moment to do this correctly the first time will save you hours of headache down the road. Since I do not have control over network settings at work, I skipped these steps and decided to use the server hostnames in my case. Please refer to the &lt;a href=&#34;http://www.afp548.com/2013/02/26/setting-up-a-basic-3-1-x-puppet-master-on-os-x-10-8/&#34; target=&#34;_blank&#34;&gt;article&lt;/a&gt; by Nate if you want to do things the approved way.&lt;/p&gt;

&lt;h3 id=&#34;install-the-software&#34;&gt;Install the software&lt;/h3&gt;

&lt;p&gt;Next, we must install Puppet on our master.  The Reference Manual has a section specifically for OS X regarding the puppet install. For Mavericks, you will want at least &lt;strong&gt;Puppet version 3.2.X&lt;/strong&gt; or higher. You will also want to install &lt;strong&gt;Facter, and Hiera&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each of these pieces of software can be obtained from &lt;a href=&#34;http://downloads.puppetlabs.com/mac/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. (After downloading, you will want to install each of the three packages. A control click might be needed if you have Gatekeeper enabled.)&lt;/p&gt;

&lt;p&gt;The puppet service account should be created automatically. It is good practice to double checking this by running. Check for Puppet user:
&lt;code&gt;bashid puppet&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The command above should list the puppet user’s uid, gid and groups.  If you get ‘id: puppet: no such user’ instead, then you will need to create the user manually.  Create the service account and puppet group using the following two commands (As per the Reference Manual):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo puppet resource group puppet ensure=present
sudo puppet resource user puppet ensure=present gid=puppet shell=&#39;/sbin/nologin&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also do not want this puppet user to appear at the login window (since it is a service account), so run the following command to hide it (or you can set it via MCX, Profile, etc):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo defaults write /Library/Preferences/com.apple.loginwindow Hide500Users -boolean YES
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;settings-up-our-puppetmaster&#34;&gt;Settings up our puppetmaster&lt;/h3&gt;

&lt;p&gt;Now we will make changes to the default puppet configuration for our server. This can be done with &lt;strong&gt;sudo nano /etc/puppet/puppet.conf&lt;/strong&gt; then enter the following text. Save with &amp;ldquo;Ctrl + X&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Default Puppet Settings
server = server_host_name_here # default is &#39;puppet&#39;
report = true
pluginsync = true
certname = server.company.com (The FQDN of the machine that is running puppet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, since pluginsync is enabled by default, create the modules folder and make sure the puppet user owns it. We can create our manifests directory while we are at it. The latter command will create the default &lt;em&gt;site.pp&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir /etc/puppet/modules
sudo chown puppet /etc/puppet/modules
sudo mkdir /etc/puppet/manifests
sudo touch /etc/puppet/manifests/site.pp
sudo chown puppet /etc/puppet/manifests/site.pp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, run puppet as a master for the first time using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo puppet master --debug --verbose --no-daemonize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we are running puppet as a master, it will generate a CA (Certificate Authority) so it can securely talk to clients and create other folder structure that the master needs to function.&lt;/p&gt;

&lt;h4 id=&#34;launchdaemon-setup&#34;&gt;LaunchDaemon setup&lt;/h4&gt;

&lt;p&gt;Puppet is now fully configured as a basic master, but we are missing one key component: a service to make sure that Puppet is running.  Since we are setting this up on OS X, we will use a launchd job.  The Puppet documentation on setting up the launchd item can be found &lt;a href=&#34;http://docs.puppetlabs.com/guides/installation.html#with-launchd&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.  In this documentation, Puppet Labs has provided us with a launchd item that can take care of starting our puppet master for us.  You can view the original plist &lt;a href=&#34;http://docs.puppetlabs.com/guides/installation.html#mac-os-x&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; or copy it from the box.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple Computer//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;EnvironmentVariables&amp;lt;/key&amp;gt;
        &amp;lt;dict&amp;gt;
                &amp;lt;key&amp;gt;PATH&amp;lt;/key&amp;gt;
                &amp;lt;string&amp;gt;/sbin:/usr/sbin:/bin:/usr/bin&amp;lt;/string&amp;gt;
                &amp;lt;key&amp;gt;RUBYLIB&amp;lt;/key&amp;gt;
                &amp;lt;string&amp;gt;/usr/lib/ruby/site_ruby/1.8/&amp;lt;/string&amp;gt;
        &amp;lt;/dict&amp;gt;
        &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;com.puppetlabs.puppetmaster&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;OnDemand&amp;lt;/key&amp;gt;
        &amp;lt;false/&amp;gt;
        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
                &amp;lt;string&amp;gt;/usr/bin/puppet&amp;lt;/string&amp;gt;
                &amp;lt;string&amp;gt;master&amp;lt;/string&amp;gt;
                &amp;lt;string&amp;gt;--verbose&amp;lt;/string&amp;gt;
                &amp;lt;string&amp;gt;--no-daemonize&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
        &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;
        &amp;lt;key&amp;gt;ServiceDescription&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;Puppetmaster Daemon&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;ServiceIPC&amp;lt;/key&amp;gt;
        &amp;lt;false/&amp;gt;
        &amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;/var/log/puppet/puppetmaster.err&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;/var/log/puppet/puppetmaster.out&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the contents of this file into &lt;strong&gt;/Library/LaunchDaemons/com.puppetlabs.puppetmaster.plist&lt;/strong&gt; . Also, make sure the permissions are correct on the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chown root:wheel /Library/LaunchDaemons/com.puppetlabs.puppetmaster.plist  
sudo chmod 644 /Library/LaunchDaemons/com.puppetlabs.puppetmaster.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, load the launchd using launchctl:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo launchctl load -w /Library/LaunchDaemons/com.puppetlabs.puppetmaster.plist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should now have a fully functional puppetmaster running on OS X Mavericks. Note that this is running with the default WEBrick server that comes with puppet. While this should be okay for development it is not suitable for production. Methods for scaling Puppet can be found on the &lt;a href=&#34;http://docs.puppetlabs.com/guides/scaling.html&#34; target=&#34;_blank&#34;&gt;Scaling Puppet&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;More information about puppet will be published in the future. I am going through beta testing with Puppet at the time of this writing.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Articles: &lt;a href=&#34;http://www.afp548.com/2013/02/26/setting-up-a-basic-3-1-x-puppet-master-on-os-x-10-8/&#34; target=&#34;_blank&#34;&gt;afp548.com&lt;/a&gt;, &lt;a href=&#34;http://docs.puppetlabs.com/guides/installation.html#mac-os-x&#34; target=&#34;_blank&#34;&gt;Puppetlabs Offical Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shrinking the disk image of an OS X VM</title>
      <link>https://clburlison.com/shrinking-the-disk-image-of-an-os-x-vm/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      <author>clburlison@gmail.com (Clayton Burlison)</author>
      <guid>https://clburlison.com/shrinking-the-disk-image-of-an-os-x-vm/</guid>
      <description>&lt;p&gt;Reducing the size of a guest OS X Virtual Machines&amp;rsquo;s vmdk file requires a few steps.  For a Windows VM&amp;rsquo;s, there is a tool from VMWare with a GUI.  Unfortunately, there is not an equivalent tool for the Mac guest VM.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This technique has tested and confirmed on OS X 10.9.2 using VMware Fusion 6.02 though it should work from 10.7 and up. This assumes your guest vm’s disk is not pre-allocated, and the virtual machine does not have any snapshots. If you have any snapshots now would be a good time to delete them.&lt;/p&gt;

&lt;p&gt;Space is always a constraint so the smaller my Virtual Machines the better. Plus, backing up a Virtual Machine or transferring to a separate drive is much faster the smaller the vmdk is.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Prepare the disk image for shrinking by using the guest vm’s Disk Utility.app to “Erase Free Space” (fast zero’ing will suffice).  For a disk image using 15 to 20GB, this may take five to ten minutes. When complete, shut down the vm and close the VMware Fusion app.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using Finder, confirm the location of your guest vm’s vmdk files.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open Terminal and type the following changing the path to your virtual disk at the end.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ &amp;quot;/Applications/VMware Fusion.app/Contents/Library/vmware-vdiskmanager&amp;quot; \
-k &amp;quot;/path/to/your/vm/disk.vmdk&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’ve successfully entered the command, Terminal will display &lt;code&gt;&amp;quot;$ Shrink: xx% done.&amp;quot;&lt;/code&gt; until the operation is complete.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.aitrus.com/2012/07/28/vmware-fusion-shrinking-the-disk-image-of-an-os-x-guest-vm/&#34; target=&#34;_blank&#34;&gt;http://blog.aitrus.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>